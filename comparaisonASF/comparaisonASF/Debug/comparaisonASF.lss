
comparaisonASF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00802000  00001a36  00001aca  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b9  00802082  00802082  00001b4e  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00001bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005553  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001532  00000000  00000000  0000746b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004fe5  00000000  00000000  0000899d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  0000d984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00031096  00000000  00000000  0000e090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc8  00000000  00000000  0003f126  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  000410f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b4c0  00000000  00000000  000413d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	22 c1       	rjmp	.+580    	; 0x24a <__bad_interrupt>
       6:	00 00       	nop
       8:	20 c1       	rjmp	.+576    	; 0x24a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c1       	rjmp	.+572    	; 0x24a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c1       	rjmp	.+568    	; 0x24a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c1       	rjmp	.+564    	; 0x24a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c1       	rjmp	.+560    	; 0x24a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c1       	rjmp	.+556    	; 0x24a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c1       	rjmp	.+552    	; 0x24a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c1       	rjmp	.+548    	; 0x24a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c1       	rjmp	.+544    	; 0x24a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c1       	rjmp	.+540    	; 0x24a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c1       	rjmp	.+536    	; 0x24a <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c1       	rjmp	.+532    	; 0x24a <__bad_interrupt>
      36:	00 00       	nop
      38:	08 c1       	rjmp	.+528    	; 0x24a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c1       	rjmp	.+524    	; 0x24a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c1       	rjmp	.+520    	; 0x24a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c1       	rjmp	.+516    	; 0x24a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c1       	rjmp	.+512    	; 0x24a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c0       	rjmp	.+508    	; 0x24a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c0       	rjmp	.+504    	; 0x24a <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c0       	rjmp	.+500    	; 0x24a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c0       	rjmp	.+496    	; 0x24a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c0       	rjmp	.+492    	; 0x24a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c0       	rjmp	.+488    	; 0x24a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c0       	rjmp	.+484    	; 0x24a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c0       	rjmp	.+480    	; 0x24a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c0       	rjmp	.+476    	; 0x24a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c0       	rjmp	.+472    	; 0x24a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c0       	rjmp	.+468    	; 0x24a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c0       	rjmp	.+464    	; 0x24a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c0       	rjmp	.+460    	; 0x24a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c0       	rjmp	.+456    	; 0x24a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c0       	rjmp	.+452    	; 0x24a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c0       	rjmp	.+448    	; 0x24a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c0       	rjmp	.+444    	; 0x24a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c0       	rjmp	.+440    	; 0x24a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c0       	rjmp	.+436    	; 0x24a <__bad_interrupt>
      96:	00 00       	nop
      98:	d8 c0       	rjmp	.+432    	; 0x24a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d6 c0       	rjmp	.+428    	; 0x24a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d4 c0       	rjmp	.+424    	; 0x24a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d2 c0       	rjmp	.+420    	; 0x24a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d0 c0       	rjmp	.+416    	; 0x24a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ce c0       	rjmp	.+412    	; 0x24a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cc c0       	rjmp	.+408    	; 0x24a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ca c0       	rjmp	.+404    	; 0x24a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c8 c0       	rjmp	.+400    	; 0x24a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c6 c0       	rjmp	.+396    	; 0x24a <__bad_interrupt>
      be:	00 00       	nop
      c0:	c4 c0       	rjmp	.+392    	; 0x24a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c2 c0       	rjmp	.+388    	; 0x24a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c0 c0       	rjmp	.+384    	; 0x24a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	be c0       	rjmp	.+380    	; 0x24a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bc c0       	rjmp	.+376    	; 0x24a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ba c0       	rjmp	.+372    	; 0x24a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b8 c0       	rjmp	.+368    	; 0x24a <__bad_interrupt>
      da:	00 00       	nop
      dc:	b6 c0       	rjmp	.+364    	; 0x24a <__bad_interrupt>
      de:	00 00       	nop
      e0:	b4 c0       	rjmp	.+360    	; 0x24a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b2 c0       	rjmp	.+356    	; 0x24a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b0 c0       	rjmp	.+352    	; 0x24a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ae c0       	rjmp	.+348    	; 0x24a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ac c0       	rjmp	.+344    	; 0x24a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	aa c0       	rjmp	.+340    	; 0x24a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a8 c0       	rjmp	.+336    	; 0x24a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a6 c0       	rjmp	.+332    	; 0x24a <__bad_interrupt>
      fe:	00 00       	nop
     100:	a4 c0       	rjmp	.+328    	; 0x24a <__bad_interrupt>
     102:	00 00       	nop
     104:	a2 c0       	rjmp	.+324    	; 0x24a <__bad_interrupt>
     106:	00 00       	nop
     108:	a0 c0       	rjmp	.+320    	; 0x24a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9e c0       	rjmp	.+316    	; 0x24a <__bad_interrupt>
     10e:	00 00       	nop
     110:	9c c0       	rjmp	.+312    	; 0x24a <__bad_interrupt>
     112:	00 00       	nop
     114:	9a c0       	rjmp	.+308    	; 0x24a <__bad_interrupt>
     116:	00 00       	nop
     118:	98 c0       	rjmp	.+304    	; 0x24a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	96 c0       	rjmp	.+300    	; 0x24a <__bad_interrupt>
     11e:	00 00       	nop
     120:	94 c0       	rjmp	.+296    	; 0x24a <__bad_interrupt>
     122:	00 00       	nop
     124:	92 c0       	rjmp	.+292    	; 0x24a <__bad_interrupt>
     126:	00 00       	nop
     128:	90 c0       	rjmp	.+288    	; 0x24a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8e c0       	rjmp	.+284    	; 0x24a <__bad_interrupt>
     12e:	00 00       	nop
     130:	8c c0       	rjmp	.+280    	; 0x24a <__bad_interrupt>
     132:	00 00       	nop
     134:	8a c0       	rjmp	.+276    	; 0x24a <__bad_interrupt>
     136:	00 00       	nop
     138:	88 c0       	rjmp	.+272    	; 0x24a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	86 c0       	rjmp	.+268    	; 0x24a <__bad_interrupt>
     13e:	00 00       	nop
     140:	84 c0       	rjmp	.+264    	; 0x24a <__bad_interrupt>
     142:	00 00       	nop
     144:	82 c0       	rjmp	.+260    	; 0x24a <__bad_interrupt>
     146:	00 00       	nop
     148:	80 c0       	rjmp	.+256    	; 0x24a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7e c0       	rjmp	.+252    	; 0x24a <__bad_interrupt>
     14e:	00 00       	nop
     150:	7c c0       	rjmp	.+248    	; 0x24a <__bad_interrupt>
     152:	00 00       	nop
     154:	7a c0       	rjmp	.+244    	; 0x24a <__bad_interrupt>
     156:	00 00       	nop
     158:	78 c0       	rjmp	.+240    	; 0x24a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	76 c0       	rjmp	.+236    	; 0x24a <__bad_interrupt>
     15e:	00 00       	nop
     160:	74 c0       	rjmp	.+232    	; 0x24a <__bad_interrupt>
     162:	00 00       	nop
     164:	72 c0       	rjmp	.+228    	; 0x24a <__bad_interrupt>
     166:	00 00       	nop
     168:	70 c0       	rjmp	.+224    	; 0x24a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6e c0       	rjmp	.+220    	; 0x24a <__bad_interrupt>
     16e:	00 00       	nop
     170:	6c c0       	rjmp	.+216    	; 0x24a <__bad_interrupt>
     172:	00 00       	nop
     174:	6a c0       	rjmp	.+212    	; 0x24a <__bad_interrupt>
     176:	00 00       	nop
     178:	68 c0       	rjmp	.+208    	; 0x24a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	66 c0       	rjmp	.+204    	; 0x24a <__bad_interrupt>
     17e:	00 00       	nop
     180:	64 c0       	rjmp	.+200    	; 0x24a <__bad_interrupt>
     182:	00 00       	nop
     184:	62 c0       	rjmp	.+196    	; 0x24a <__bad_interrupt>
     186:	00 00       	nop
     188:	60 c0       	rjmp	.+192    	; 0x24a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5e c0       	rjmp	.+188    	; 0x24a <__bad_interrupt>
     18e:	00 00       	nop
     190:	5c c0       	rjmp	.+184    	; 0x24a <__bad_interrupt>
     192:	00 00       	nop
     194:	5a c0       	rjmp	.+180    	; 0x24a <__bad_interrupt>
     196:	00 00       	nop
     198:	58 c0       	rjmp	.+176    	; 0x24a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	56 c0       	rjmp	.+172    	; 0x24a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	54 c0       	rjmp	.+168    	; 0x24a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	52 c0       	rjmp	.+164    	; 0x24a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	50 c0       	rjmp	.+160    	; 0x24a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4e c0       	rjmp	.+156    	; 0x24a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4c c0       	rjmp	.+152    	; 0x24a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4a c0       	rjmp	.+148    	; 0x24a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	48 c0       	rjmp	.+144    	; 0x24a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	46 c0       	rjmp	.+140    	; 0x24a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	44 c0       	rjmp	.+136    	; 0x24a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	42 c0       	rjmp	.+132    	; 0x24a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	40 c0       	rjmp	.+128    	; 0x24a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3e c0       	rjmp	.+124    	; 0x24a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3c c0       	rjmp	.+120    	; 0x24a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3a c0       	rjmp	.+116    	; 0x24a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	38 c0       	rjmp	.+112    	; 0x24a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	36 c0       	rjmp	.+108    	; 0x24a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	34 c0       	rjmp	.+104    	; 0x24a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	32 c0       	rjmp	.+100    	; 0x24a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	30 c0       	rjmp	.+96     	; 0x24a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2e c0       	rjmp	.+92     	; 0x24a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2c c0       	rjmp	.+88     	; 0x24a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_125>
     1f8:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_126>
     1fc:	f0 05       	cpc	r31, r0
     1fe:	f3 05       	cpc	r31, r3
     200:	f6 05       	cpc	r31, r6
     202:	f9 05       	cpc	r31, r9
     204:	fc 05       	cpc	r31, r12
     206:	ff 05       	cpc	r31, r15
     208:	02 06       	cpc	r0, r18

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	10 e2       	ldi	r17, 0x20	; 32
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	e6 e3       	ldi	r30, 0x36	; 54
     222:	fa e1       	ldi	r31, 0x1A	; 26
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a2 38       	cpi	r26, 0x82	; 130
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	21 e2       	ldi	r18, 0x21	; 33
     236:	a2 e8       	ldi	r26, 0x82	; 130
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ab 33       	cpi	r26, 0x3B	; 59
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	03 d0       	rcall	.+6      	; 0x24c <main>
     246:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <_exit>

0000024a <__bad_interrupt>:
     24a:	da ce       	rjmp	.-588    	; 0x0 <__vectors>

0000024c <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
     24c:	0e 94 93 0c 	call	0x1926	; 0x1926 <board_init>
	
	
		sysclk_init();
     250:	0e 94 23 0c 	call	0x1846	; 0x1846 <sysclk_init>
		irq_initialize_vectors();
     254:	87 e0       	ldi	r24, 0x07	; 7
     256:	80 93 a2 00 	sts	0x00A2, r24
		cpu_irq_enable();
     25a:	78 94       	sei
		board_init();
     25c:	0e 94 93 0c 	call	0x1926	; 0x1926 <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     260:	e5 e3       	ldi	r30, 0x35	; 53
     262:	f1 e2       	ldi	r31, 0x21	; 33
     264:	10 82       	st	Z, r1
     266:	11 82       	std	Z+1, r1	; 0x01
     268:	12 82       	std	Z+2, r1	; 0x02
     26a:	13 82       	std	Z+3, r1	; 0x03
     26c:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     272:	2f e3       	ldi	r18, 0x3F	; 63
     274:	8d e0       	ldi	r24, 0x0D	; 13
     276:	93 e0       	ldi	r25, 0x03	; 3
     278:	21 50       	subi	r18, 0x01	; 1
     27a:	80 40       	sbci	r24, 0x00	; 0
     27c:	90 40       	sbci	r25, 0x00	; 0
     27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x2c>
     280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x36>
     282:	00 00       	nop
		sleepmgr_init(); // Optional
		
		_delay_ms(1000);
		
		udc_start();
     284:	0e d1       	rcall	.+540    	; 0x4a2 <udc_start>

	/* Insert application code here, after the board has been initialized. */
}
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	08 95       	ret

0000028c <udi_hid_mouse_disable>:
	return UDI_HID_MOUSE_ENABLE_EXT();
}


void udi_hid_mouse_disable(void)
{
     28c:	08 95       	ret

0000028e <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
	return 0;
}
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	08 95       	ret

00000292 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
	return false;
}
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	08 95       	ret

00000296 <udi_hid_mouse_enable>:
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
	// Initialize internal value
	udi_hid_mouse_rate = 0;
     296:	10 92 8a 20 	sts	0x208A, r1
	udi_hid_mouse_protocol = 0;
     29a:	10 92 88 20 	sts	0x2088, r1
	udi_hid_mouse_report_trans_ongoing = false;
     29e:	10 92 82 20 	sts	0x2082, r1
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
     2a2:	10 92 83 20 	sts	0x2083, r1
     2a6:	10 92 84 20 	sts	0x2084, r1
     2aa:	10 92 85 20 	sts	0x2085, r1
     2ae:	10 92 86 20 	sts	0x2086, r1
	udi_hid_mouse_b_report_valid = false;
     2b2:	10 92 87 20 	sts	0x2087, r1
	return UDI_HID_MOUSE_ENABLE_EXT();
}
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	08 95       	ret

000002ba <udi_hid_mouse_setup>:
}


bool udi_hid_mouse_setup(void)
{
	return udi_hid_setup(&udi_hid_mouse_rate,
     2ba:	29 e4       	ldi	r18, 0x49	; 73
     2bc:	31 e0       	ldi	r19, 0x01	; 1
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e2       	ldi	r21, 0x20	; 32
     2c2:	68 e8       	ldi	r22, 0x88	; 136
     2c4:	70 e2       	ldi	r23, 0x20	; 32
     2c6:	8a e8       	ldi	r24, 0x8A	; 138
     2c8:	90 e2       	ldi	r25, 0x20	; 32
     2ca:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <udi_hid_setup>
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
     2ce:	08 95       	ret

000002d0 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     2d0:	e0 91 90 20 	lds	r30, 0x2090
     2d4:	f0 91 91 20 	lds	r31, 0x2091
     2d8:	01 90       	ld	r0, Z+
     2da:	f0 81       	ld	r31, Z
     2dc:	e0 2d       	mov	r30, r0
     2de:	22 81       	ldd	r18, Z+2	; 0x02
     2e0:	33 81       	ldd	r19, Z+3	; 0x03
     2e2:	2e 0f       	add	r18, r30
     2e4:	3f 1f       	adc	r19, r31
     2e6:	fc 01       	movw	r30, r24
     2e8:	40 81       	ld	r20, Z
     2ea:	e4 0f       	add	r30, r20
     2ec:	f1 1d       	adc	r31, r1
     2ee:	e2 17       	cp	r30, r18
     2f0:	f3 07       	cpc	r31, r19
     2f2:	b8 f4       	brcc	.+46     	; 0x322 <udc_next_desc_in_iface+0x52>
     2f4:	81 81       	ldd	r24, Z+1	; 0x01
     2f6:	84 30       	cpi	r24, 0x04	; 4
     2f8:	b9 f0       	breq	.+46     	; 0x328 <udc_next_desc_in_iface+0x58>
     2fa:	86 13       	cpse	r24, r22
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <udc_next_desc_in_iface+0x40>
     2fe:	05 c0       	rjmp	.+10     	; 0x30a <udc_next_desc_in_iface+0x3a>
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	84 30       	cpi	r24, 0x04	; 4
     304:	a1 f0       	breq	.+40     	; 0x32e <udc_next_desc_in_iface+0x5e>
     306:	86 13       	cpse	r24, r22
     308:	03 c0       	rjmp	.+6      	; 0x310 <udc_next_desc_in_iface+0x40>
     30a:	8e 2f       	mov	r24, r30
     30c:	9f 2f       	mov	r25, r31
     30e:	08 95       	ret
     310:	80 81       	ld	r24, Z
     312:	e8 0f       	add	r30, r24
     314:	f1 1d       	adc	r31, r1
     316:	e2 17       	cp	r30, r18
     318:	f3 07       	cpc	r31, r19
     31a:	90 f3       	brcs	.-28     	; 0x300 <udc_next_desc_in_iface+0x30>
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	08 95       	ret
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret

00000334 <udc_valid_address>:
     334:	80 91 27 21 	lds	r24, 0x2127
     338:	8f 77       	andi	r24, 0x7F	; 127
     33a:	d0 c6       	rjmp	.+3488   	; 0x10dc <udd_set_address>
     33c:	08 95       	ret

0000033e <udc_update_iface_desc>:
     33e:	90 91 92 20 	lds	r25, 0x2092
     342:	99 23       	and	r25, r25
     344:	81 f1       	breq	.+96     	; 0x3a6 <udc_update_iface_desc+0x68>
     346:	e0 91 90 20 	lds	r30, 0x2090
     34a:	f0 91 91 20 	lds	r31, 0x2091
     34e:	01 90       	ld	r0, Z+
     350:	f0 81       	ld	r31, Z
     352:	e0 2d       	mov	r30, r0
     354:	94 81       	ldd	r25, Z+4	; 0x04
     356:	89 17       	cp	r24, r25
     358:	40 f5       	brcc	.+80     	; 0x3aa <udc_update_iface_desc+0x6c>
     35a:	e0 93 8e 20 	sts	0x208E, r30
     35e:	f0 93 8f 20 	sts	0x208F, r31
     362:	22 81       	ldd	r18, Z+2	; 0x02
     364:	33 81       	ldd	r19, Z+3	; 0x03
     366:	2e 0f       	add	r18, r30
     368:	3f 1f       	adc	r19, r31
     36a:	e2 17       	cp	r30, r18
     36c:	f3 07       	cpc	r31, r19
     36e:	f8 f4       	brcc	.+62     	; 0x3ae <udc_update_iface_desc+0x70>
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	94 30       	cpi	r25, 0x04	; 4
     374:	61 f4       	brne	.+24     	; 0x38e <udc_update_iface_desc+0x50>
     376:	92 81       	ldd	r25, Z+2	; 0x02
     378:	98 13       	cpse	r25, r24
     37a:	09 c0       	rjmp	.+18     	; 0x38e <udc_update_iface_desc+0x50>
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	96 13       	cpse	r25, r22
     380:	06 c0       	rjmp	.+12     	; 0x38e <udc_update_iface_desc+0x50>
     382:	e0 93 8e 20 	sts	0x208E, r30
     386:	f0 93 8f 20 	sts	0x208F, r31
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	08 95       	ret
     38e:	90 81       	ld	r25, Z
     390:	e9 0f       	add	r30, r25
     392:	f1 1d       	adc	r31, r1
     394:	e2 17       	cp	r30, r18
     396:	f3 07       	cpc	r31, r19
     398:	58 f3       	brcs	.-42     	; 0x370 <udc_update_iface_desc+0x32>
     39a:	e0 93 8e 20 	sts	0x208E, r30
     39e:	f0 93 8f 20 	sts	0x208F, r31
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	08 95       	ret
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	08 95       	ret
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	08 95       	ret
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	08 95       	ret

000003b2 <udc_iface_disable>:
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	c8 2f       	mov	r28, r24
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	be df       	rcall	.-132    	; 0x33e <udc_update_iface_desc>
     3c2:	18 2f       	mov	r17, r24
     3c4:	88 23       	and	r24, r24
     3c6:	79 f1       	breq	.+94     	; 0x426 <udc_iface_disable+0x74>
     3c8:	a0 91 90 20 	lds	r26, 0x2090
     3cc:	b0 91 91 20 	lds	r27, 0x2091
     3d0:	ec 2f       	mov	r30, r28
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	ee 0f       	add	r30, r30
     3d6:	ff 1f       	adc	r31, r31
     3d8:	12 96       	adiw	r26, 0x02	; 2
     3da:	8d 91       	ld	r24, X+
     3dc:	9c 91       	ld	r25, X
     3de:	13 97       	sbiw	r26, 0x03	; 3
     3e0:	e8 0f       	add	r30, r24
     3e2:	f9 1f       	adc	r31, r25
     3e4:	e0 80       	ld	r14, Z
     3e6:	f1 80       	ldd	r15, Z+1	; 0x01
     3e8:	d7 01       	movw	r26, r14
     3ea:	16 96       	adiw	r26, 0x06	; 6
     3ec:	ed 91       	ld	r30, X+
     3ee:	fc 91       	ld	r31, X
     3f0:	17 97       	sbiw	r26, 0x07	; 7
     3f2:	19 95       	eicall
     3f4:	68 2f       	mov	r22, r24
     3f6:	8c 2f       	mov	r24, r28
     3f8:	a2 df       	rcall	.-188    	; 0x33e <udc_update_iface_desc>
     3fa:	18 2f       	mov	r17, r24
     3fc:	88 23       	and	r24, r24
     3fe:	99 f0       	breq	.+38     	; 0x426 <udc_iface_disable+0x74>
     400:	c0 91 8e 20 	lds	r28, 0x208E
     404:	d0 91 8f 20 	lds	r29, 0x208F
     408:	65 e0       	ldi	r22, 0x05	; 5
     40a:	ce 01       	movw	r24, r28
     40c:	61 df       	rcall	.-318    	; 0x2d0 <udc_next_desc_in_iface>
     40e:	ec 01       	movw	r28, r24
     410:	89 2b       	or	r24, r25
     412:	19 f0       	breq	.+6      	; 0x41a <udc_iface_disable+0x68>
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	a6 d7       	rcall	.+3916   	; 0x1364 <udd_ep_free>
     418:	f7 cf       	rjmp	.-18     	; 0x408 <udc_iface_disable+0x56>
     41a:	d7 01       	movw	r26, r14
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	ed 91       	ld	r30, X+
     420:	fc 91       	ld	r31, X
     422:	13 97       	sbiw	r26, 0x03	; 3
     424:	19 95       	eicall
     426:	81 2f       	mov	r24, r17
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	08 95       	ret

00000434 <udc_iface_enable>:
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	18 2f       	mov	r17, r24
     43c:	80 df       	rcall	.-256    	; 0x33e <udc_update_iface_desc>
     43e:	88 23       	and	r24, r24
     440:	39 f1       	breq	.+78     	; 0x490 <udc_iface_enable+0x5c>
     442:	c0 91 8e 20 	lds	r28, 0x208E
     446:	d0 91 8f 20 	lds	r29, 0x208F
     44a:	65 e0       	ldi	r22, 0x05	; 5
     44c:	ce 01       	movw	r24, r28
     44e:	40 df       	rcall	.-384    	; 0x2d0 <udc_next_desc_in_iface>
     450:	ec 01       	movw	r28, r24
     452:	89 2b       	or	r24, r25
     454:	41 f0       	breq	.+16     	; 0x466 <udc_iface_enable+0x32>
     456:	4c 81       	ldd	r20, Y+4	; 0x04
     458:	5d 81       	ldd	r21, Y+5	; 0x05
     45a:	6b 81       	ldd	r22, Y+3	; 0x03
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	4b d6       	rcall	.+3222   	; 0x10f6 <udd_ep_alloc>
     460:	81 11       	cpse	r24, r1
     462:	f3 cf       	rjmp	.-26     	; 0x44a <udc_iface_enable+0x16>
     464:	15 c0       	rjmp	.+42     	; 0x490 <udc_iface_enable+0x5c>
     466:	a0 91 90 20 	lds	r26, 0x2090
     46a:	b0 91 91 20 	lds	r27, 0x2091
     46e:	e1 2f       	mov	r30, r17
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	12 96       	adiw	r26, 0x02	; 2
     478:	8d 91       	ld	r24, X+
     47a:	9c 91       	ld	r25, X
     47c:	13 97       	sbiw	r26, 0x03	; 3
     47e:	e8 0f       	add	r30, r24
     480:	f9 1f       	adc	r31, r25
     482:	01 90       	ld	r0, Z+
     484:	f0 81       	ld	r31, Z
     486:	e0 2d       	mov	r30, r0
     488:	01 90       	ld	r0, Z+
     48a:	f0 81       	ld	r31, Z
     48c:	e0 2d       	mov	r30, r0
     48e:	19 95       	eicall
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	08 95       	ret

00000498 <udc_get_interface_desc>:
     498:	80 91 8e 20 	lds	r24, 0x208E
     49c:	90 91 8f 20 	lds	r25, 0x208F
     4a0:	08 95       	ret

000004a2 <udc_start>:
     4a2:	bd c5       	rjmp	.+2938   	; 0x101e <udd_enable>
     4a4:	08 95       	ret

000004a6 <udc_reset>:
     4a6:	cf 93       	push	r28
     4a8:	80 91 92 20 	lds	r24, 0x2092
     4ac:	88 23       	and	r24, r24
     4ae:	c1 f0       	breq	.+48     	; 0x4e0 <udc_reset+0x3a>
     4b0:	e0 91 90 20 	lds	r30, 0x2090
     4b4:	f0 91 91 20 	lds	r31, 0x2091
     4b8:	01 90       	ld	r0, Z+
     4ba:	f0 81       	ld	r31, Z
     4bc:	e0 2d       	mov	r30, r0
     4be:	84 81       	ldd	r24, Z+4	; 0x04
     4c0:	88 23       	and	r24, r24
     4c2:	71 f0       	breq	.+28     	; 0x4e0 <udc_reset+0x3a>
     4c4:	c0 e0       	ldi	r28, 0x00	; 0
     4c6:	8c 2f       	mov	r24, r28
     4c8:	74 df       	rcall	.-280    	; 0x3b2 <udc_iface_disable>
     4ca:	cf 5f       	subi	r28, 0xFF	; 255
     4cc:	e0 91 90 20 	lds	r30, 0x2090
     4d0:	f0 91 91 20 	lds	r31, 0x2091
     4d4:	01 90       	ld	r0, Z+
     4d6:	f0 81       	ld	r31, Z
     4d8:	e0 2d       	mov	r30, r0
     4da:	84 81       	ldd	r24, Z+4	; 0x04
     4dc:	c8 17       	cp	r28, r24
     4de:	98 f3       	brcs	.-26     	; 0x4c6 <udc_reset+0x20>
     4e0:	10 92 92 20 	sts	0x2092, r1
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	80 93 96 20 	sts	0x2096, r24
     4ec:	90 93 97 20 	sts	0x2097, r25
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     4f4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     4f6:	80 91 92 20 	lds	r24, 0x2092
     4fa:	88 23       	and	r24, r24
     4fc:	49 f1       	breq	.+82     	; 0x550 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     4fe:	a0 91 90 20 	lds	r26, 0x2090
     502:	b0 91 91 20 	lds	r27, 0x2091
     506:	ed 91       	ld	r30, X+
     508:	fc 91       	ld	r31, X
     50a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     50c:	84 81       	ldd	r24, Z+4	; 0x04
     50e:	88 23       	and	r24, r24
     510:	f9 f0       	breq	.+62     	; 0x550 <udc_sof_notify+0x5c>
     512:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     514:	ec 2f       	mov	r30, r28
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	12 96       	adiw	r26, 0x02	; 2
     51e:	8d 91       	ld	r24, X+
     520:	9c 91       	ld	r25, X
     522:	13 97       	sbiw	r26, 0x03	; 3
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
     528:	01 90       	ld	r0, Z+
     52a:	f0 81       	ld	r31, Z
     52c:	e0 2d       	mov	r30, r0
     52e:	00 84       	ldd	r0, Z+8	; 0x08
     530:	f1 85       	ldd	r31, Z+9	; 0x09
     532:	e0 2d       	mov	r30, r0
     534:	30 97       	sbiw	r30, 0x00	; 0
     536:	09 f0       	breq	.+2      	; 0x53a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     538:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     53a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     53c:	a0 91 90 20 	lds	r26, 0x2090
     540:	b0 91 91 20 	lds	r27, 0x2091
     544:	ed 91       	ld	r30, X+
     546:	fc 91       	ld	r31, X
     548:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     54a:	84 81       	ldd	r24, Z+4	; 0x04
     54c:	c8 17       	cp	r28, r24
     54e:	10 f3       	brcs	.-60     	; 0x514 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     55c:	e5 e2       	ldi	r30, 0x25	; 37
     55e:	f1 e2       	ldi	r31, 0x21	; 33
     560:	12 86       	std	Z+10, r1	; 0x0a
     562:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     564:	14 86       	std	Z+12, r1	; 0x0c
     566:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     568:	16 86       	std	Z+14, r1	; 0x0e
     56a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     56c:	80 81       	ld	r24, Z
     56e:	88 23       	and	r24, r24
     570:	0c f0       	brlt	.+2      	; 0x574 <udc_process_setup+0x20>
     572:	36 c2       	rjmp	.+1132   	; 0x9e0 <udc_process_setup+0x48c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     574:	20 91 2b 21 	lds	r18, 0x212B
     578:	30 91 2c 21 	lds	r19, 0x212C
     57c:	21 15       	cp	r18, r1
     57e:	31 05       	cpc	r19, r1
     580:	09 f0       	breq	.+2      	; 0x584 <udc_process_setup+0x30>
     582:	33 c2       	rjmp	.+1126   	; 0x9ea <udc_process_setup+0x496>
     584:	29 c2       	rjmp	.+1106   	; 0x9d8 <udc_process_setup+0x484>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     586:	8f 71       	andi	r24, 0x1F	; 31
     588:	09 f0       	breq	.+2      	; 0x58c <udc_process_setup+0x38>
     58a:	7f c0       	rjmp	.+254    	; 0x68a <udc_process_setup+0x136>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     58c:	90 91 26 21 	lds	r25, 0x2126
     590:	96 30       	cpi	r25, 0x06	; 6
     592:	79 f0       	breq	.+30     	; 0x5b2 <udc_process_setup+0x5e>
     594:	98 30       	cpi	r25, 0x08	; 8
     596:	09 f4       	brne	.+2      	; 0x59a <udc_process_setup+0x46>
     598:	6e c0       	rjmp	.+220    	; 0x676 <udc_process_setup+0x122>
     59a:	91 11       	cpse	r25, r1
     59c:	76 c0       	rjmp	.+236    	; 0x68a <udc_process_setup+0x136>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     59e:	22 30       	cpi	r18, 0x02	; 2
     5a0:	31 05       	cpc	r19, r1
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <udc_process_setup+0x52>
     5a4:	a2 c1       	rjmp	.+836    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     5a6:	62 e0       	ldi	r22, 0x02	; 2
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	86 e9       	ldi	r24, 0x96	; 150
     5ac:	90 e2       	ldi	r25, 0x20	; 32
     5ae:	9c d5       	rcall	.+2872   	; 0x10e8 <udd_set_setup_payload>
     5b0:	21 c2       	rjmp	.+1090   	; 0x9f4 <udc_process_setup+0x4a0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     5b2:	80 91 27 21 	lds	r24, 0x2127
     5b6:	90 91 28 21 	lds	r25, 0x2128

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     5ba:	29 2f       	mov	r18, r25
     5bc:	33 27       	eor	r19, r19
     5be:	22 30       	cpi	r18, 0x02	; 2
     5c0:	31 05       	cpc	r19, r1
     5c2:	a9 f0       	breq	.+42     	; 0x5ee <udc_process_setup+0x9a>
     5c4:	24 f4       	brge	.+8      	; 0x5ce <udc_process_setup+0x7a>
     5c6:	21 30       	cpi	r18, 0x01	; 1
     5c8:	31 05       	cpc	r19, r1
     5ca:	41 f0       	breq	.+16     	; 0x5dc <udc_process_setup+0x88>
     5cc:	85 c1       	rjmp	.+778    	; 0x8d8 <udc_process_setup+0x384>
     5ce:	23 30       	cpi	r18, 0x03	; 3
     5d0:	31 05       	cpc	r19, r1
     5d2:	d9 f1       	breq	.+118    	; 0x64a <udc_process_setup+0xf6>
     5d4:	2f 30       	cpi	r18, 0x0F	; 15
     5d6:	31 05       	cpc	r19, r1
     5d8:	51 f1       	breq	.+84     	; 0x62e <udc_process_setup+0xda>
     5da:	7e c1       	rjmp	.+764    	; 0x8d8 <udc_process_setup+0x384>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     5dc:	80 91 42 20 	lds	r24, 0x2042
     5e0:	90 91 43 20 	lds	r25, 0x2043
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     5e4:	dc 01       	movw	r26, r24
     5e6:	6c 91       	ld	r22, X
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	7e d5       	rcall	.+2812   	; 0x10e8 <udd_set_setup_payload>
     5ec:	35 c0       	rjmp	.+106    	; 0x658 <udc_process_setup+0x104>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     5ee:	e0 91 42 20 	lds	r30, 0x2042
     5f2:	f0 91 43 20 	lds	r31, 0x2043
     5f6:	21 89       	ldd	r18, Z+17	; 0x11
     5f8:	82 17       	cp	r24, r18
     5fa:	08 f0       	brcs	.+2      	; 0x5fe <udc_process_setup+0xaa>
     5fc:	76 c1       	rjmp	.+748    	; 0x8ea <udc_process_setup+0x396>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     5fe:	99 27       	eor	r25, r25
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	e0 91 44 20 	lds	r30, 0x2044
     60c:	f0 91 45 20 	lds	r31, 0x2045
     610:	e8 0f       	add	r30, r24
     612:	f9 1f       	adc	r31, r25
     614:	80 81       	ld	r24, Z
     616:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     618:	fc 01       	movw	r30, r24
     61a:	62 81       	ldd	r22, Z+2	; 0x02
     61c:	73 81       	ldd	r23, Z+3	; 0x03
     61e:	64 d5       	rcall	.+2760   	; 0x10e8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     620:	e0 91 2d 21 	lds	r30, 0x212D
     624:	f0 91 2e 21 	lds	r31, 0x212E
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	81 83       	std	Z+1, r24	; 0x01
     62c:	15 c0       	rjmp	.+42     	; 0x658 <udc_process_setup+0x104>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     62e:	80 91 46 20 	lds	r24, 0x2046
     632:	90 91 47 20 	lds	r25, 0x2047
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	09 f4       	brne	.+2      	; 0x63c <udc_process_setup+0xe8>
     63a:	57 c1       	rjmp	.+686    	; 0x8ea <udc_process_setup+0x396>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     63c:	dc 01       	movw	r26, r24
     63e:	12 96       	adiw	r26, 0x02	; 2
     640:	6d 91       	ld	r22, X+
     642:	7c 91       	ld	r23, X
     644:	13 97       	sbiw	r26, 0x03	; 3
     646:	50 d5       	rcall	.+2720   	; 0x10e8 <udd_set_setup_payload>
     648:	07 c0       	rjmp	.+14     	; 0x658 <udc_process_setup+0x104>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     64a:	81 11       	cpse	r24, r1
     64c:	4e c1       	rjmp	.+668    	; 0x8ea <udc_process_setup+0x396>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     64e:	64 e0       	ldi	r22, 0x04	; 4
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	8e e3       	ldi	r24, 0x3E	; 62
     654:	90 e2       	ldi	r25, 0x20	; 32
     656:	48 d5       	rcall	.+2704   	; 0x10e8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     658:	e5 e2       	ldi	r30, 0x25	; 37
     65a:	f1 e2       	ldi	r31, 0x21	; 33
     65c:	86 81       	ldd	r24, Z+6	; 0x06
     65e:	97 81       	ldd	r25, Z+7	; 0x07
     660:	22 85       	ldd	r18, Z+10	; 0x0a
     662:	33 85       	ldd	r19, Z+11	; 0x0b
     664:	82 17       	cp	r24, r18
     666:	93 07       	cpc	r25, r19
     668:	08 f0       	brcs	.+2      	; 0x66c <udc_process_setup+0x118>
     66a:	c4 c1       	rjmp	.+904    	; 0x9f4 <udc_process_setup+0x4a0>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     66c:	80 93 2f 21 	sts	0x212F, r24
     670:	90 93 30 21 	sts	0x2130, r25
     674:	bf c1       	rjmp	.+894    	; 0x9f4 <udc_process_setup+0x4a0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     676:	21 30       	cpi	r18, 0x01	; 1
     678:	31 05       	cpc	r19, r1
     67a:	09 f0       	breq	.+2      	; 0x67e <udc_process_setup+0x12a>
     67c:	36 c1       	rjmp	.+620    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	82 e9       	ldi	r24, 0x92	; 146
     684:	90 e2       	ldi	r25, 0x20	; 32
     686:	30 d5       	rcall	.+2656   	; 0x10e8 <udd_set_setup_payload>
     688:	b5 c1       	rjmp	.+874    	; 0x9f4 <udc_process_setup+0x4a0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     68a:	81 30       	cpi	r24, 0x01	; 1
     68c:	e1 f5       	brne	.+120    	; 0x706 <udc_process_setup+0x1b2>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     68e:	90 91 26 21 	lds	r25, 0x2126
     692:	9a 30       	cpi	r25, 0x0A	; 10
     694:	c1 f5       	brne	.+112    	; 0x706 <udc_process_setup+0x1b2>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     696:	21 30       	cpi	r18, 0x01	; 1
     698:	31 05       	cpc	r19, r1
     69a:	09 f0       	breq	.+2      	; 0x69e <udc_process_setup+0x14a>
     69c:	26 c1       	rjmp	.+588    	; 0x8ea <udc_process_setup+0x396>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     69e:	80 91 92 20 	lds	r24, 0x2092
     6a2:	88 23       	and	r24, r24
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <udc_process_setup+0x154>
     6a6:	21 c1       	rjmp	.+578    	; 0x8ea <udc_process_setup+0x396>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     6a8:	c0 91 29 21 	lds	r28, 0x2129
     6ac:	d0 91 2a 21 	lds	r29, 0x212A
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     6b0:	00 91 90 20 	lds	r16, 0x2090
     6b4:	10 91 91 20 	lds	r17, 0x2091
     6b8:	d8 01       	movw	r26, r16
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	84 81       	ldd	r24, Z+4	; 0x04
     6c0:	c8 17       	cp	r28, r24
     6c2:	08 f0       	brcs	.+2      	; 0x6c6 <udc_process_setup+0x172>
     6c4:	12 c1       	rjmp	.+548    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	8c 2f       	mov	r24, r28
     6ca:	39 de       	rcall	.-910    	; 0x33e <udc_update_iface_desc>
     6cc:	88 23       	and	r24, r24
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <udc_process_setup+0x17e>
     6d0:	0c c1       	rjmp	.+536    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     6d2:	ce 01       	movw	r24, r28
     6d4:	99 27       	eor	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	d8 01       	movw	r26, r16
     6dc:	12 96       	adiw	r26, 0x02	; 2
     6de:	ed 91       	ld	r30, X+
     6e0:	fc 91       	ld	r31, X
     6e2:	13 97       	sbiw	r26, 0x03	; 3
     6e4:	e8 0f       	add	r30, r24
     6e6:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     6e8:	01 90       	ld	r0, Z+
     6ea:	f0 81       	ld	r31, Z
     6ec:	e0 2d       	mov	r30, r0
     6ee:	86 81       	ldd	r24, Z+6	; 0x06
     6f0:	97 81       	ldd	r25, Z+7	; 0x07
     6f2:	fc 01       	movw	r30, r24
     6f4:	19 95       	eicall
     6f6:	80 93 94 20 	sts	0x2094, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	84 e9       	ldi	r24, 0x94	; 148
     700:	90 e2       	ldi	r25, 0x20	; 32
     702:	f2 d4       	rcall	.+2532   	; 0x10e8 <udd_set_setup_payload>
     704:	77 c1       	rjmp	.+750    	; 0x9f4 <udc_process_setup+0x4a0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     706:	82 30       	cpi	r24, 0x02	; 2
     708:	09 f0       	breq	.+2      	; 0x70c <udc_process_setup+0x1b8>
     70a:	ef c0       	rjmp	.+478    	; 0x8ea <udc_process_setup+0x396>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     70c:	80 91 26 21 	lds	r24, 0x2126
     710:	81 11       	cpse	r24, r1
     712:	e4 c0       	rjmp	.+456    	; 0x8dc <udc_process_setup+0x388>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     714:	22 30       	cpi	r18, 0x02	; 2
     716:	31 05       	cpc	r19, r1
     718:	09 f0       	breq	.+2      	; 0x71c <udc_process_setup+0x1c8>
     71a:	e7 c0       	rjmp	.+462    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     71c:	80 91 29 21 	lds	r24, 0x2129
     720:	7b d5       	rcall	.+2806   	; 0x1218 <udd_ep_is_halted>
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	80 93 8c 20 	sts	0x208C, r24
     728:	90 93 8d 20 	sts	0x208D, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     72c:	62 e0       	ldi	r22, 0x02	; 2
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	8c e8       	ldi	r24, 0x8C	; 140
     732:	90 e2       	ldi	r25, 0x20	; 32
     734:	d9 d4       	rcall	.+2482   	; 0x10e8 <udd_set_setup_payload>
     736:	5e c1       	rjmp	.+700    	; 0x9f4 <udc_process_setup+0x4a0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     738:	8f 71       	andi	r24, 0x1F	; 31
     73a:	09 f0       	breq	.+2      	; 0x73e <udc_process_setup+0x1ea>
     73c:	83 c0       	rjmp	.+262    	; 0x844 <udc_process_setup+0x2f0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     73e:	90 91 26 21 	lds	r25, 0x2126
     742:	93 30       	cpi	r25, 0x03	; 3
     744:	09 f4       	brne	.+2      	; 0x748 <udc_process_setup+0x1f4>
     746:	cc c0       	rjmp	.+408    	; 0x8e0 <udc_process_setup+0x38c>
     748:	18 f4       	brcc	.+6      	; 0x750 <udc_process_setup+0x1fc>
     74a:	91 30       	cpi	r25, 0x01	; 1
     74c:	a1 f0       	breq	.+40     	; 0x776 <udc_process_setup+0x222>
     74e:	7a c0       	rjmp	.+244    	; 0x844 <udc_process_setup+0x2f0>
     750:	95 30       	cpi	r25, 0x05	; 5
     752:	19 f0       	breq	.+6      	; 0x75a <udc_process_setup+0x206>
     754:	99 30       	cpi	r25, 0x09	; 9
     756:	39 f1       	breq	.+78     	; 0x7a6 <udc_process_setup+0x252>
     758:	75 c0       	rjmp	.+234    	; 0x844 <udc_process_setup+0x2f0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     75a:	80 91 2b 21 	lds	r24, 0x212B
     75e:	90 91 2c 21 	lds	r25, 0x212C
     762:	89 2b       	or	r24, r25
     764:	09 f0       	breq	.+2      	; 0x768 <udc_process_setup+0x214>
     766:	c1 c0       	rjmp	.+386    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     768:	8a e9       	ldi	r24, 0x9A	; 154
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	80 93 31 21 	sts	0x2131, r24
     770:	90 93 32 21 	sts	0x2132, r25
     774:	3f c1       	rjmp	.+638    	; 0x9f4 <udc_process_setup+0x4a0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     776:	80 91 2b 21 	lds	r24, 0x212B
     77a:	90 91 2c 21 	lds	r25, 0x212C
     77e:	89 2b       	or	r24, r25
     780:	09 f0       	breq	.+2      	; 0x784 <udc_process_setup+0x230>
     782:	b3 c0       	rjmp	.+358    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     784:	80 91 27 21 	lds	r24, 0x2127
     788:	90 91 28 21 	lds	r25, 0x2128
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	09 f0       	breq	.+2      	; 0x792 <udc_process_setup+0x23e>
     790:	ac c0       	rjmp	.+344    	; 0x8ea <udc_process_setup+0x396>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     792:	80 91 96 20 	lds	r24, 0x2096
     796:	90 91 97 20 	lds	r25, 0x2097
     79a:	8d 7f       	andi	r24, 0xFD	; 253
     79c:	80 93 96 20 	sts	0x2096, r24
     7a0:	90 93 97 20 	sts	0x2097, r25
     7a4:	27 c1       	rjmp	.+590    	; 0x9f4 <udc_process_setup+0x4a0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     7a6:	80 91 2b 21 	lds	r24, 0x212B
     7aa:	90 91 2c 21 	lds	r25, 0x212C
     7ae:	89 2b       	or	r24, r25
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <udc_process_setup+0x260>
     7b2:	9b c0       	rjmp	.+310    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     7b4:	96 d4       	rcall	.+2348   	; 0x10e2 <udd_getaddress>
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <udc_process_setup+0x268>
     7ba:	97 c0       	rjmp	.+302    	; 0x8ea <udc_process_setup+0x396>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     7bc:	20 91 27 21 	lds	r18, 0x2127
     7c0:	30 91 28 21 	lds	r19, 0x2128
     7c4:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     7c6:	e0 91 42 20 	lds	r30, 0x2042
     7ca:	f0 91 43 20 	lds	r31, 0x2043
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     7ce:	81 89       	ldd	r24, Z+17	; 0x11
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	82 17       	cp	r24, r18
     7d4:	93 07       	cpc	r25, r19
     7d6:	08 f4       	brcc	.+2      	; 0x7da <udc_process_setup+0x286>
     7d8:	88 c0       	rjmp	.+272    	; 0x8ea <udc_process_setup+0x396>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     7da:	65 de       	rcall	.-822    	; 0x4a6 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     7dc:	80 91 27 21 	lds	r24, 0x2127
     7e0:	90 91 28 21 	lds	r25, 0x2128
     7e4:	80 93 92 20 	sts	0x2092, r24
	if (udc_num_configuration == 0) {
     7e8:	88 23       	and	r24, r24
     7ea:	09 f4       	brne	.+2      	; 0x7ee <udc_process_setup+0x29a>
     7ec:	03 c1       	rjmp	.+518    	; 0x9f4 <udc_process_setup+0x4a0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     7ee:	99 27       	eor	r25, r25
     7f0:	81 50       	subi	r24, 0x01	; 1
     7f2:	90 4c       	sbci	r25, 0xC0	; 192
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	e0 91 44 20 	lds	r30, 0x2044
     800:	f0 91 45 20 	lds	r31, 0x2045
     804:	e8 0f       	add	r30, r24
     806:	f9 1f       	adc	r31, r25
     808:	e0 93 90 20 	sts	0x2090, r30
     80c:	f0 93 91 20 	sts	0x2091, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     810:	01 90       	ld	r0, Z+
     812:	f0 81       	ld	r31, Z
     814:	e0 2d       	mov	r30, r0
     816:	84 81       	ldd	r24, Z+4	; 0x04
     818:	88 23       	and	r24, r24
     81a:	09 f4       	brne	.+2      	; 0x81e <udc_process_setup+0x2ca>
     81c:	eb c0       	rjmp	.+470    	; 0x9f4 <udc_process_setup+0x4a0>
     81e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	8c 2f       	mov	r24, r28
     824:	07 de       	rcall	.-1010   	; 0x434 <udc_iface_enable>
     826:	88 23       	and	r24, r24
     828:	09 f4       	brne	.+2      	; 0x82c <udc_process_setup+0x2d8>
     82a:	5f c0       	rjmp	.+190    	; 0x8ea <udc_process_setup+0x396>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     82c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     82e:	e0 91 90 20 	lds	r30, 0x2090
     832:	f0 91 91 20 	lds	r31, 0x2091
     836:	01 90       	ld	r0, Z+
     838:	f0 81       	ld	r31, Z
     83a:	e0 2d       	mov	r30, r0
     83c:	84 81       	ldd	r24, Z+4	; 0x04
     83e:	c8 17       	cp	r28, r24
     840:	78 f3       	brcs	.-34     	; 0x820 <udc_process_setup+0x2cc>
     842:	d8 c0       	rjmp	.+432    	; 0x9f4 <udc_process_setup+0x4a0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	e1 f4       	brne	.+56     	; 0x880 <udc_process_setup+0x32c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     848:	90 91 26 21 	lds	r25, 0x2126
     84c:	9b 30       	cpi	r25, 0x0B	; 11
     84e:	c1 f4       	brne	.+48     	; 0x880 <udc_process_setup+0x32c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     850:	80 91 2b 21 	lds	r24, 0x212B
     854:	90 91 2c 21 	lds	r25, 0x212C
     858:	89 2b       	or	r24, r25
     85a:	09 f0       	breq	.+2      	; 0x85e <udc_process_setup+0x30a>
     85c:	46 c0       	rjmp	.+140    	; 0x8ea <udc_process_setup+0x396>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     85e:	80 91 92 20 	lds	r24, 0x2092
     862:	88 23       	and	r24, r24
     864:	09 f4       	brne	.+2      	; 0x868 <udc_process_setup+0x314>
     866:	41 c0       	rjmp	.+130    	; 0x8ea <udc_process_setup+0x396>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     868:	e5 e2       	ldi	r30, 0x25	; 37
     86a:	f1 e2       	ldi	r31, 0x21	; 33
     86c:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     86e:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     870:	8c 2f       	mov	r24, r28
     872:	9f dd       	rcall	.-1218   	; 0x3b2 <udc_iface_disable>
     874:	88 23       	and	r24, r24
     876:	c9 f1       	breq	.+114    	; 0x8ea <udc_process_setup+0x396>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     878:	6d 2f       	mov	r22, r29
     87a:	8c 2f       	mov	r24, r28
     87c:	db dd       	rcall	.-1098   	; 0x434 <udc_iface_enable>
     87e:	33 c0       	rjmp	.+102    	; 0x8e6 <udc_process_setup+0x392>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	99 f5       	brne	.+102    	; 0x8ea <udc_process_setup+0x396>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     884:	80 91 26 21 	lds	r24, 0x2126
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	19 f0       	breq	.+6      	; 0x892 <udc_process_setup+0x33e>
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	89 f0       	breq	.+34     	; 0x8b2 <udc_process_setup+0x35e>
     890:	29 c0       	rjmp	.+82     	; 0x8e4 <udc_process_setup+0x390>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     892:	80 91 2b 21 	lds	r24, 0x212B
     896:	90 91 2c 21 	lds	r25, 0x212C
     89a:	89 2b       	or	r24, r25
     89c:	31 f5       	brne	.+76     	; 0x8ea <udc_process_setup+0x396>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     89e:	80 91 27 21 	lds	r24, 0x2127
     8a2:	90 91 28 21 	lds	r25, 0x2128
     8a6:	89 2b       	or	r24, r25
     8a8:	01 f5       	brne	.+64     	; 0x8ea <udc_process_setup+0x396>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     8aa:	80 91 29 21 	lds	r24, 0x2129
     8ae:	cf d4       	rcall	.+2462   	; 0x124e <udd_ep_clear_halt>
     8b0:	1a c0       	rjmp	.+52     	; 0x8e6 <udc_process_setup+0x392>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     8b2:	80 91 2b 21 	lds	r24, 0x212B
     8b6:	90 91 2c 21 	lds	r25, 0x212C
     8ba:	89 2b       	or	r24, r25
     8bc:	b1 f4       	brne	.+44     	; 0x8ea <udc_process_setup+0x396>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     8be:	80 91 27 21 	lds	r24, 0x2127
     8c2:	90 91 28 21 	lds	r25, 0x2128
     8c6:	89 2b       	or	r24, r25
     8c8:	81 f4       	brne	.+32     	; 0x8ea <udc_process_setup+0x396>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     8ca:	c5 e2       	ldi	r28, 0x25	; 37
     8cc:	d1 e2       	ldi	r29, 0x21	; 33
     8ce:	8c 81       	ldd	r24, Y+4	; 0x04
     8d0:	00 d5       	rcall	.+2560   	; 0x12d2 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     8d2:	8c 81       	ldd	r24, Y+4	; 0x04
     8d4:	63 d5       	rcall	.+2758   	; 0x139c <udd_ep_set_halt>
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <udc_process_setup+0x392>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <udc_process_setup+0x392>
				break;
			}
		}
#endif
	}
	return false;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <udc_process_setup+0x392>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <udc_process_setup+0x392>
				break;
			}
		}
#endif
	}
	return false;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     8e6:	81 11       	cpse	r24, r1
     8e8:	86 c0       	rjmp	.+268    	; 0x9f6 <udc_process_setup+0x4a2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     8ea:	80 91 25 21 	lds	r24, 0x2125
     8ee:	8f 71       	andi	r24, 0x1F	; 31
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	71 f5       	brne	.+92     	; 0x950 <udc_process_setup+0x3fc>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     8f4:	80 91 92 20 	lds	r24, 0x2092
     8f8:	88 23       	and	r24, r24
     8fa:	51 f1       	breq	.+84     	; 0x950 <udc_process_setup+0x3fc>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     8fc:	00 91 29 21 	lds	r16, 0x2129
     900:	10 91 2a 21 	lds	r17, 0x212A
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     904:	c0 91 90 20 	lds	r28, 0x2090
     908:	d0 91 91 20 	lds	r29, 0x2091
     90c:	e8 81       	ld	r30, Y
     90e:	f9 81       	ldd	r31, Y+1	; 0x01
     910:	84 81       	ldd	r24, Z+4	; 0x04
     912:	08 17       	cp	r16, r24
     914:	e8 f4       	brcc	.+58     	; 0x950 <udc_process_setup+0x3fc>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	80 2f       	mov	r24, r16
     91a:	11 dd       	rcall	.-1502   	; 0x33e <udc_update_iface_desc>
     91c:	88 23       	and	r24, r24
     91e:	c1 f0       	breq	.+48     	; 0x950 <udc_process_setup+0x3fc>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     920:	f8 01       	movw	r30, r16
     922:	ff 27       	eor	r31, r31
     924:	cf 01       	movw	r24, r30
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	ea 81       	ldd	r30, Y+2	; 0x02
     92c:	fb 81       	ldd	r31, Y+3	; 0x03
     92e:	e8 0f       	add	r30, r24
     930:	f9 1f       	adc	r31, r25
     932:	c0 81       	ld	r28, Z
     934:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     936:	ee 81       	ldd	r30, Y+6	; 0x06
     938:	ff 81       	ldd	r31, Y+7	; 0x07
     93a:	19 95       	eicall
     93c:	68 2f       	mov	r22, r24
     93e:	80 2f       	mov	r24, r16
     940:	fe dc       	rcall	.-1540   	; 0x33e <udc_update_iface_desc>
     942:	88 23       	and	r24, r24
     944:	29 f0       	breq	.+10     	; 0x950 <udc_process_setup+0x3fc>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     946:	ec 81       	ldd	r30, Y+4	; 0x04
     948:	fd 81       	ldd	r31, Y+5	; 0x05
     94a:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     94c:	81 11       	cpse	r24, r1
     94e:	53 c0       	rjmp	.+166    	; 0x9f6 <udc_process_setup+0x4a2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     950:	80 91 25 21 	lds	r24, 0x2125
     954:	8f 71       	andi	r24, 0x1F	; 31
     956:	82 30       	cpi	r24, 0x02	; 2
     958:	09 f0       	breq	.+2      	; 0x95c <udc_process_setup+0x408>
     95a:	40 c0       	rjmp	.+128    	; 0x9dc <udc_process_setup+0x488>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     95c:	80 91 92 20 	lds	r24, 0x2092
     960:	88 23       	and	r24, r24
     962:	b1 f1       	breq	.+108    	; 0x9d0 <udc_process_setup+0x47c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     964:	a0 91 90 20 	lds	r26, 0x2090
     968:	b0 91 91 20 	lds	r27, 0x2091
     96c:	ed 91       	ld	r30, X+
     96e:	fc 91       	ld	r31, X
     970:	11 97       	sbiw	r26, 0x01	; 1
     972:	84 81       	ldd	r24, Z+4	; 0x04
     974:	88 23       	and	r24, r24
     976:	71 f1       	breq	.+92     	; 0x9d4 <udc_process_setup+0x480>
     978:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     97a:	ec 2f       	mov	r30, r28
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	12 96       	adiw	r26, 0x02	; 2
     984:	8d 91       	ld	r24, X+
     986:	9c 91       	ld	r25, X
     988:	13 97       	sbiw	r26, 0x03	; 3
     98a:	e8 0f       	add	r30, r24
     98c:	f9 1f       	adc	r31, r25
     98e:	00 81       	ld	r16, Z
     990:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     992:	d8 01       	movw	r26, r16
     994:	16 96       	adiw	r26, 0x06	; 6
     996:	ed 91       	ld	r30, X+
     998:	fc 91       	ld	r31, X
     99a:	17 97       	sbiw	r26, 0x07	; 7
     99c:	19 95       	eicall
     99e:	68 2f       	mov	r22, r24
     9a0:	8c 2f       	mov	r24, r28
     9a2:	cd dc       	rcall	.-1638   	; 0x33e <udc_update_iface_desc>
     9a4:	88 23       	and	r24, r24
     9a6:	39 f1       	breq	.+78     	; 0x9f6 <udc_process_setup+0x4a2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     9a8:	d8 01       	movw	r26, r16
     9aa:	14 96       	adiw	r26, 0x04	; 4
     9ac:	ed 91       	ld	r30, X+
     9ae:	fc 91       	ld	r31, X
     9b0:	15 97       	sbiw	r26, 0x05	; 5
     9b2:	19 95       	eicall
     9b4:	81 11       	cpse	r24, r1
     9b6:	1f c0       	rjmp	.+62     	; 0x9f6 <udc_process_setup+0x4a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     9b8:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9ba:	a0 91 90 20 	lds	r26, 0x2090
     9be:	b0 91 91 20 	lds	r27, 0x2091
     9c2:	ed 91       	ld	r30, X+
     9c4:	fc 91       	ld	r31, X
     9c6:	11 97       	sbiw	r26, 0x01	; 1
     9c8:	94 81       	ldd	r25, Z+4	; 0x04
     9ca:	c9 17       	cp	r28, r25
     9cc:	b0 f2       	brcs	.-84     	; 0x97a <udc_process_setup+0x426>
     9ce:	13 c0       	rjmp	.+38     	; 0x9f6 <udc_process_setup+0x4a2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	11 c0       	rjmp	.+34     	; 0x9f6 <udc_process_setup+0x4a2>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	0f c0       	rjmp	.+30     	; 0x9f6 <udc_process_setup+0x4a2>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0d c0       	rjmp	.+26     	; 0x9f6 <udc_process_setup+0x4a2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0b c0       	rjmp	.+22     	; 0x9f6 <udc_process_setup+0x4a2>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     9e0:	98 2f       	mov	r25, r24
     9e2:	90 76       	andi	r25, 0x60	; 96
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <udc_process_setup+0x494>
     9e6:	81 cf       	rjmp	.-254    	; 0x8ea <udc_process_setup+0x396>
     9e8:	a7 ce       	rjmp	.-690    	; 0x738 <udc_process_setup+0x1e4>
     9ea:	98 2f       	mov	r25, r24
     9ec:	90 76       	andi	r25, 0x60	; 96
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <udc_process_setup+0x49e>
     9f0:	7c cf       	rjmp	.-264    	; 0x8ea <udc_process_setup+0x396>
     9f2:	c9 cd       	rjmp	.-1134   	; 0x586 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	08 95       	ret

00000a00 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     a00:	81 11       	cpse	r24, r1
     a02:	22 c0       	rjmp	.+68     	; 0xa48 <udd_sleep_mode+0x48>
     a04:	90 91 24 21 	lds	r25, 0x2124
     a08:	99 23       	and	r25, r25
     a0a:	d9 f0       	breq	.+54     	; 0xa42 <udd_sleep_mode+0x42>
     a0c:	90 91 36 21 	lds	r25, 0x2136
     a10:	91 11       	cpse	r25, r1
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <udd_sleep_mode+0x16>
     a14:	ff cf       	rjmp	.-2      	; 0xa14 <udd_sleep_mode+0x14>
     a16:	2f b7       	in	r18, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	e5 e3       	ldi	r30, 0x35	; 53
     a1c:	f1 e2       	ldi	r31, 0x21	; 33
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	91 50       	subi	r25, 0x01	; 1
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	2f bf       	out	0x3f, r18	; 63
     a26:	0d c0       	rjmp	.+26     	; 0xa42 <udd_sleep_mode+0x42>
     a28:	90 91 36 21 	lds	r25, 0x2136
     a2c:	9f 3f       	cpi	r25, 0xFF	; 255
     a2e:	09 f4       	brne	.+2      	; 0xa32 <udd_sleep_mode+0x32>
     a30:	ff cf       	rjmp	.-2      	; 0xa30 <udd_sleep_mode+0x30>
     a32:	2f b7       	in	r18, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	e5 e3       	ldi	r30, 0x35	; 53
     a38:	f1 e2       	ldi	r31, 0x21	; 33
     a3a:	91 81       	ldd	r25, Z+1	; 0x01
     a3c:	9f 5f       	subi	r25, 0xFF	; 255
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	2f bf       	out	0x3f, r18	; 63
     a42:	80 93 24 21 	sts	0x2124, r24
     a46:	08 95       	ret
     a48:	90 91 24 21 	lds	r25, 0x2124
     a4c:	99 23       	and	r25, r25
     a4e:	61 f3       	breq	.-40     	; 0xa28 <udd_sleep_mode+0x28>
     a50:	f8 cf       	rjmp	.-16     	; 0xa42 <udd_sleep_mode+0x42>

00000a52 <udd_ctrl_init>:
     a52:	0f 93       	push	r16
     a54:	e8 ec       	ldi	r30, 0xC8	; 200
     a56:	f4 e0       	ldi	r31, 0x04	; 4
     a58:	80 81       	ld	r24, Z
     a5a:	8f 7d       	andi	r24, 0xDF	; 223
     a5c:	80 83       	st	Z, r24
     a5e:	80 81       	ld	r24, Z
     a60:	8f 7d       	andi	r24, 0xDF	; 223
     a62:	80 83       	st	Z, r24
     a64:	e8 e0       	ldi	r30, 0x08	; 8
     a66:	f1 e2       	ldi	r31, 0x21	; 33
     a68:	02 e0       	ldi	r16, 0x02	; 2
     a6a:	05 93       	las	Z, r16
     a6c:	10 92 0a 21 	sts	0x210A, r1
     a70:	10 92 0b 21 	sts	0x210B, r1
     a74:	00 e2       	ldi	r16, 0x20	; 32
     a76:	06 93       	lac	Z, r16
     a78:	00 e4       	ldi	r16, 0x40	; 64
     a7a:	06 93       	lac	Z, r16
     a7c:	e0 e0       	ldi	r30, 0x00	; 0
     a7e:	f1 e2       	ldi	r31, 0x21	; 33
     a80:	00 e2       	ldi	r16, 0x20	; 32
     a82:	06 93       	lac	Z, r16
     a84:	00 e4       	ldi	r16, 0x40	; 64
     a86:	06 93       	lac	Z, r16
     a88:	e5 e2       	ldi	r30, 0x25	; 37
     a8a:	f1 e2       	ldi	r31, 0x21	; 33
     a8c:	14 86       	std	Z+12, r1	; 0x0c
     a8e:	15 86       	std	Z+13, r1	; 0x0d
     a90:	16 86       	std	Z+14, r1	; 0x0e
     a92:	17 86       	std	Z+15, r1	; 0x0f
     a94:	12 86       	std	Z+10, r1	; 0x0a
     a96:	13 86       	std	Z+11, r1	; 0x0b
     a98:	10 92 f7 20 	sts	0x20F7, r1
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <udd_ctrl_stall_data>:
     aa0:	0f 93       	push	r16
     aa2:	85 e0       	ldi	r24, 0x05	; 5
     aa4:	80 93 f7 20 	sts	0x20F7, r24
     aa8:	e9 e0       	ldi	r30, 0x09	; 9
     aaa:	f1 e2       	ldi	r31, 0x21	; 33
     aac:	04 e0       	ldi	r16, 0x04	; 4
     aae:	05 93       	las	Z, r16
     ab0:	e1 e0       	ldi	r30, 0x01	; 1
     ab2:	f1 e2       	ldi	r31, 0x21	; 33
     ab4:	04 e0       	ldi	r16, 0x04	; 4
     ab6:	05 93       	las	Z, r16
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <udd_ctrl_send_zlp_in>:
     abc:	0f 93       	push	r16
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	80 93 f7 20 	sts	0x20F7, r24
     ac4:	10 92 0a 21 	sts	0x210A, r1
     ac8:	10 92 0b 21 	sts	0x210B, r1
     acc:	e8 e0       	ldi	r30, 0x08	; 8
     ace:	f1 e2       	ldi	r31, 0x21	; 33
     ad0:	02 e0       	ldi	r16, 0x02	; 2
     ad2:	06 93       	lac	Z, r16
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <udd_ctrl_endofrequest>:
     ad8:	e0 91 31 21 	lds	r30, 0x2131
     adc:	f0 91 32 21 	lds	r31, 0x2132
     ae0:	30 97       	sbiw	r30, 0x00	; 0
     ae2:	09 f0       	breq	.+2      	; 0xae6 <udd_ctrl_endofrequest+0xe>
     ae4:	19 95       	eicall
     ae6:	08 95       	ret

00000ae8 <udd_ctrl_in_sent>:
     ae8:	0f 93       	push	r16
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	80 91 f7 20 	lds	r24, 0x20F7
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	19 f4       	brne	.+6      	; 0xafc <udd_ctrl_in_sent+0x14>
     af6:	f0 df       	rcall	.-32     	; 0xad8 <udd_ctrl_endofrequest>
     af8:	ac df       	rcall	.-168    	; 0xa52 <udd_ctrl_init>
     afa:	5e c0       	rjmp	.+188    	; 0xbb8 <udd_ctrl_in_sent+0xd0>
     afc:	80 91 f3 20 	lds	r24, 0x20F3
     b00:	90 91 f4 20 	lds	r25, 0x20F4
     b04:	c0 91 2f 21 	lds	r28, 0x212F
     b08:	d0 91 30 21 	lds	r29, 0x2130
     b0c:	c8 1b       	sub	r28, r24
     b0e:	d9 0b       	sbc	r29, r25
     b10:	71 f5       	brne	.+92     	; 0xb6e <udd_ctrl_in_sent+0x86>
     b12:	20 91 f5 20 	lds	r18, 0x20F5
     b16:	30 91 f6 20 	lds	r19, 0x20F6
     b1a:	82 0f       	add	r24, r18
     b1c:	93 1f       	adc	r25, r19
     b1e:	80 93 f5 20 	sts	0x20F5, r24
     b22:	90 93 f6 20 	sts	0x20F6, r25
     b26:	20 91 2b 21 	lds	r18, 0x212B
     b2a:	30 91 2c 21 	lds	r19, 0x212C
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	21 f0       	breq	.+8      	; 0xb3c <udd_ctrl_in_sent+0x54>
     b34:	80 91 98 20 	lds	r24, 0x2098
     b38:	88 23       	and	r24, r24
     b3a:	41 f0       	breq	.+16     	; 0xb4c <udd_ctrl_in_sent+0x64>
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	80 93 f7 20 	sts	0x20F7, r24
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f1 e2       	ldi	r31, 0x21	; 33
     b46:	02 e0       	ldi	r16, 0x02	; 2
     b48:	06 93       	lac	Z, r16
     b4a:	36 c0       	rjmp	.+108    	; 0xbb8 <udd_ctrl_in_sent+0xd0>
     b4c:	e0 91 33 21 	lds	r30, 0x2133
     b50:	f0 91 34 21 	lds	r31, 0x2134
     b54:	30 97       	sbiw	r30, 0x00	; 0
     b56:	99 f0       	breq	.+38     	; 0xb7e <udd_ctrl_in_sent+0x96>
     b58:	19 95       	eicall
     b5a:	88 23       	and	r24, r24
     b5c:	81 f0       	breq	.+32     	; 0xb7e <udd_ctrl_in_sent+0x96>
     b5e:	10 92 f3 20 	sts	0x20F3, r1
     b62:	10 92 f4 20 	sts	0x20F4, r1
     b66:	c0 91 2f 21 	lds	r28, 0x212F
     b6a:	d0 91 30 21 	lds	r29, 0x2130
     b6e:	c8 30       	cpi	r28, 0x08	; 8
     b70:	d1 05       	cpc	r29, r1
     b72:	28 f0       	brcs	.+10     	; 0xb7e <udd_ctrl_in_sent+0x96>
     b74:	10 92 98 20 	sts	0x2098, r1
     b78:	c8 e0       	ldi	r28, 0x08	; 8
     b7a:	d0 e0       	ldi	r29, 0x00	; 0
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <udd_ctrl_in_sent+0x9c>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 98 20 	sts	0x2098, r24
     b84:	e8 ef       	ldi	r30, 0xF8	; 248
     b86:	f0 e2       	ldi	r31, 0x20	; 32
     b88:	c2 8b       	std	Z+18, r28	; 0x12
     b8a:	d3 8b       	std	Z+19, r29	; 0x13
     b8c:	80 91 f3 20 	lds	r24, 0x20F3
     b90:	90 91 f4 20 	lds	r25, 0x20F4
     b94:	20 91 2d 21 	lds	r18, 0x212D
     b98:	30 91 2e 21 	lds	r19, 0x212E
     b9c:	28 0f       	add	r18, r24
     b9e:	39 1f       	adc	r19, r25
     ba0:	24 8b       	std	Z+20, r18	; 0x14
     ba2:	35 8b       	std	Z+21, r19	; 0x15
     ba4:	c8 0f       	add	r28, r24
     ba6:	d9 1f       	adc	r29, r25
     ba8:	c0 93 f3 20 	sts	0x20F3, r28
     bac:	d0 93 f4 20 	sts	0x20F4, r29
     bb0:	e8 e0       	ldi	r30, 0x08	; 8
     bb2:	f1 e2       	ldi	r31, 0x21	; 33
     bb4:	02 e0       	ldi	r16, 0x02	; 2
     bb6:	06 93       	lac	Z, r16
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <udd_ep_get_size>:
     bc0:	fc 01       	movw	r30, r24
     bc2:	81 81       	ldd	r24, Z+1	; 0x01
     bc4:	e8 2f       	mov	r30, r24
     bc6:	e7 70       	andi	r30, 0x07	; 7
     bc8:	8e 2f       	mov	r24, r30
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	fc 01       	movw	r30, r24
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	e7 30       	cpi	r30, 0x07	; 7
     bd2:	f1 05       	cpc	r31, r1
     bd4:	d0 f4       	brcc	.+52     	; 0xc0a <udd_ep_get_size+0x4a>
     bd6:	88 27       	eor	r24, r24
     bd8:	e2 50       	subi	r30, 0x02	; 2
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	8f 4f       	sbci	r24, 0xFF	; 255
     bde:	18 c7       	rjmp	.+3632   	; 0x1a10 <__tablejump2__>
     be0:	80 e1       	ldi	r24, 0x10	; 16
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	08 95       	ret
     be6:	80 e2       	ldi	r24, 0x20	; 32
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	08 95       	ret
     bec:	80 e4       	ldi	r24, 0x40	; 64
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	08 95       	ret
     bf2:	80 e8       	ldi	r24, 0x80	; 128
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	08 95       	ret
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	08 95       	ret
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	08 95       	ret
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	08 95       	ret
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	08 95       	ret

00000c10 <udd_ep_get_job>:
     c10:	28 2f       	mov	r18, r24
     c12:	2f 70       	andi	r18, 0x0F	; 15
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	22 0f       	add	r18, r18
     c18:	33 1f       	adc	r19, r19
     c1a:	08 2e       	mov	r0, r24
     c1c:	00 0c       	add	r0, r0
     c1e:	99 0b       	sbc	r25, r25
     c20:	88 27       	eor	r24, r24
     c22:	99 0f       	add	r25, r25
     c24:	88 1f       	adc	r24, r24
     c26:	99 27       	eor	r25, r25
     c28:	82 0f       	add	r24, r18
     c2a:	93 1f       	adc	r25, r19
     c2c:	02 97       	sbiw	r24, 0x02	; 2
     c2e:	9c 01       	movw	r18, r24
     c30:	22 0f       	add	r18, r18
     c32:	33 1f       	adc	r19, r19
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	82 0f       	add	r24, r18
     c3e:	93 1f       	adc	r25, r19
     c40:	87 52       	subi	r24, 0x27	; 39
     c42:	9f 4d       	sbci	r25, 0xDF	; 223
     c44:	08 95       	ret

00000c46 <udd_ctrl_interrupt_tc_setup>:
     c46:	0f 93       	push	r16
     c48:	cf 93       	push	r28
     c4a:	80 91 cc 04 	lds	r24, 0x04CC
     c4e:	80 ff       	sbrs	r24, 0
     c50:	62 c0       	rjmp	.+196    	; 0xd16 <udd_ctrl_interrupt_tc_setup+0xd0>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 cc 04 	sts	0x04CC, r24
     c58:	e0 e0       	ldi	r30, 0x00	; 0
     c5a:	f1 e2       	ldi	r31, 0x21	; 33
     c5c:	00 e8       	ldi	r16, 0x80	; 128
     c5e:	06 93       	lac	Z, r16
     c60:	e8 e0       	ldi	r30, 0x08	; 8
     c62:	f1 e2       	ldi	r31, 0x21	; 33
     c64:	00 e8       	ldi	r16, 0x80	; 128
     c66:	06 93       	lac	Z, r16
     c68:	80 93 ca 04 	sts	0x04CA, r24
     c6c:	e0 e0       	ldi	r30, 0x00	; 0
     c6e:	f1 e2       	ldi	r31, 0x21	; 33
     c70:	00 e1       	ldi	r16, 0x10	; 16
     c72:	06 93       	lac	Z, r16
     c74:	80 91 f7 20 	lds	r24, 0x20F7
     c78:	88 23       	and	r24, r24
     c7a:	29 f0       	breq	.+10     	; 0xc86 <udd_ctrl_interrupt_tc_setup+0x40>
     c7c:	83 50       	subi	r24, 0x03	; 3
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	08 f4       	brcc	.+2      	; 0xc84 <udd_ctrl_interrupt_tc_setup+0x3e>
     c82:	2a df       	rcall	.-428    	; 0xad8 <udd_ctrl_endofrequest>
     c84:	e6 de       	rcall	.-564    	; 0xa52 <udd_ctrl_init>
     c86:	80 91 02 21 	lds	r24, 0x2102
     c8a:	90 91 03 21 	lds	r25, 0x2103
     c8e:	08 97       	sbiw	r24, 0x08	; 8
     c90:	09 f0       	breq	.+2      	; 0xc94 <udd_ctrl_interrupt_tc_setup+0x4e>
     c92:	43 c0       	rjmp	.+134    	; 0xd1a <udd_ctrl_interrupt_tc_setup+0xd4>
     c94:	88 e0       	ldi	r24, 0x08	; 8
     c96:	eb ee       	ldi	r30, 0xEB	; 235
     c98:	f0 e2       	ldi	r31, 0x20	; 32
     c9a:	a5 e2       	ldi	r26, 0x25	; 37
     c9c:	b1 e2       	ldi	r27, 0x21	; 33
     c9e:	01 90       	ld	r0, Z+
     ca0:	0d 92       	st	X+, r0
     ca2:	8a 95       	dec	r24
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <udd_ctrl_interrupt_tc_setup+0x58>
     ca6:	e8 ec       	ldi	r30, 0xC8	; 200
     ca8:	f4 e0       	ldi	r31, 0x04	; 4
     caa:	80 81       	ld	r24, Z
     cac:	80 62       	ori	r24, 0x20	; 32
     cae:	80 83       	st	Z, r24
     cb0:	80 81       	ld	r24, Z
     cb2:	80 62       	ori	r24, 0x20	; 32
     cb4:	80 83       	st	Z, r24
     cb6:	4e dc       	rcall	.-1892   	; 0x554 <udc_process_setup>
     cb8:	c8 2f       	mov	r28, r24
     cba:	81 11       	cpse	r24, r1
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <udd_ctrl_interrupt_tc_setup+0x7e>
     cbe:	f0 de       	rcall	.-544    	; 0xaa0 <udd_ctrl_stall_data>
     cc0:	c1 e0       	ldi	r28, 0x01	; 1
     cc2:	2c c0       	rjmp	.+88     	; 0xd1c <udd_ctrl_interrupt_tc_setup+0xd6>
     cc4:	80 91 25 21 	lds	r24, 0x2125
     cc8:	88 23       	and	r24, r24
     cca:	6c f4       	brge	.+26     	; 0xce6 <udd_ctrl_interrupt_tc_setup+0xa0>
     ccc:	10 92 f5 20 	sts	0x20F5, r1
     cd0:	10 92 f6 20 	sts	0x20F6, r1
     cd4:	10 92 f3 20 	sts	0x20F3, r1
     cd8:	10 92 f4 20 	sts	0x20F4, r1
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	80 93 f7 20 	sts	0x20F7, r24
     ce2:	02 df       	rcall	.-508    	; 0xae8 <udd_ctrl_in_sent>
     ce4:	1b c0       	rjmp	.+54     	; 0xd1c <udd_ctrl_interrupt_tc_setup+0xd6>
     ce6:	80 91 2b 21 	lds	r24, 0x212B
     cea:	90 91 2c 21 	lds	r25, 0x212C
     cee:	89 2b       	or	r24, r25
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <udd_ctrl_interrupt_tc_setup+0xb0>
     cf2:	e4 de       	rcall	.-568    	; 0xabc <udd_ctrl_send_zlp_in>
     cf4:	13 c0       	rjmp	.+38     	; 0xd1c <udd_ctrl_interrupt_tc_setup+0xd6>
     cf6:	10 92 f5 20 	sts	0x20F5, r1
     cfa:	10 92 f6 20 	sts	0x20F6, r1
     cfe:	10 92 f3 20 	sts	0x20F3, r1
     d02:	10 92 f4 20 	sts	0x20F4, r1
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 f7 20 	sts	0x20F7, r24
     d0c:	e0 e0       	ldi	r30, 0x00	; 0
     d0e:	f1 e2       	ldi	r31, 0x21	; 33
     d10:	02 e0       	ldi	r16, 0x02	; 2
     d12:	06 93       	lac	Z, r16
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <udd_ctrl_interrupt_tc_setup+0xd6>
     d16:	c0 e0       	ldi	r28, 0x00	; 0
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <udd_ctrl_interrupt_tc_setup+0xd6>
     d1a:	c1 e0       	ldi	r28, 0x01	; 1
     d1c:	8c 2f       	mov	r24, r28
     d1e:	cf 91       	pop	r28
     d20:	0f 91       	pop	r16
     d22:	08 95       	ret

00000d24 <udd_ep_trans_complet>:
     d24:	8f 92       	push	r8
     d26:	9f 92       	push	r9
     d28:	af 92       	push	r10
     d2a:	bf 92       	push	r11
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	d8 2e       	mov	r13, r24
     d3c:	69 df       	rcall	.-302    	; 0xc10 <udd_ep_get_job>
     d3e:	8c 01       	movw	r16, r24
     d40:	bd 2c       	mov	r11, r13
     d42:	bb 1c       	adc	r11, r11
     d44:	bb 24       	eor	r11, r11
     d46:	bb 1c       	adc	r11, r11
     d48:	cd 2d       	mov	r28, r13
     d4a:	cf 70       	andi	r28, 0x0F	; 15
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
     d4e:	cc 0f       	add	r28, r28
     d50:	dd 1f       	adc	r29, r29
     d52:	cb 0d       	add	r28, r11
     d54:	d1 1d       	adc	r29, r1
     d56:	ce 01       	movw	r24, r28
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	9c 01       	movw	r18, r24
     d66:	20 50       	subi	r18, 0x00	; 0
     d68:	3f 4d       	sbci	r19, 0xDF	; 223
     d6a:	79 01       	movw	r14, r18
     d6c:	c9 01       	movw	r24, r18
     d6e:	28 df       	rcall	.-432    	; 0xbc0 <udd_ep_get_size>
     d70:	4c 01       	movw	r8, r24
     d72:	bb 20       	and	r11, r11
     d74:	09 f4       	brne	.+2      	; 0xd78 <udd_ep_trans_complet+0x54>
     d76:	70 c0       	rjmp	.+224    	; 0xe58 <udd_ep_trans_complet+0x134>
     d78:	fe 01       	movw	r30, r28
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	e8 50       	subi	r30, 0x08	; 8
     d88:	ff 4d       	sbci	r31, 0xDF	; 223
     d8a:	26 85       	ldd	r18, Z+14	; 0x0e
     d8c:	37 85       	ldd	r19, Z+15	; 0x0f
     d8e:	d8 01       	movw	r26, r16
     d90:	15 96       	adiw	r26, 0x05	; 5
     d92:	8d 91       	ld	r24, X+
     d94:	9c 91       	ld	r25, X
     d96:	16 97       	sbiw	r26, 0x06	; 6
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	15 96       	adiw	r26, 0x05	; 5
     d9e:	8d 93       	st	X+, r24
     da0:	9c 93       	st	X, r25
     da2:	16 97       	sbiw	r26, 0x06	; 6
     da4:	13 96       	adiw	r26, 0x03	; 3
     da6:	2d 91       	ld	r18, X+
     da8:	3c 91       	ld	r19, X
     daa:	14 97       	sbiw	r26, 0x04	; 4
     dac:	82 17       	cp	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	09 f4       	brne	.+2      	; 0xdb4 <udd_ep_trans_complet+0x90>
     db2:	3c c0       	rjmp	.+120    	; 0xe2c <udd_ep_trans_complet+0x108>
     db4:	28 1b       	sub	r18, r24
     db6:	39 0b       	sbc	r19, r25
     db8:	21 15       	cp	r18, r1
     dba:	b4 e0       	ldi	r27, 0x04	; 4
     dbc:	3b 07       	cpc	r19, r27
     dbe:	38 f0       	brcs	.+14     	; 0xdce <udd_ep_trans_complet+0xaa>
     dc0:	2f ef       	ldi	r18, 0xFF	; 255
     dc2:	33 e0       	ldi	r19, 0x03	; 3
     dc4:	c9 01       	movw	r24, r18
     dc6:	b4 01       	movw	r22, r8
     dc8:	0f d6       	rcall	.+3102   	; 0x19e8 <__udivmodhi4>
     dca:	28 1b       	sub	r18, r24
     dcc:	39 0b       	sbc	r19, r25
     dce:	f8 01       	movw	r30, r16
     dd0:	80 81       	ld	r24, Z
     dd2:	81 ff       	sbrs	r24, 1
     dd4:	09 c0       	rjmp	.+18     	; 0xde8 <udd_ep_trans_complet+0xc4>
     dd6:	c9 01       	movw	r24, r18
     dd8:	b4 01       	movw	r22, r8
     dda:	06 d6       	rcall	.+3084   	; 0x19e8 <__udivmodhi4>
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	89 2b       	or	r24, r25
     de0:	09 f0       	breq	.+2      	; 0xde4 <udd_ep_trans_complet+0xc0>
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	84 2f       	mov	r24, r20
     de6:	01 c0       	rjmp	.+2      	; 0xdea <udd_ep_trans_complet+0xc6>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	d8 01       	movw	r26, r16
     dec:	9c 91       	ld	r25, X
     dee:	80 fb       	bst	r24, 0
     df0:	91 f9       	bld	r25, 1
     df2:	9c 93       	st	X, r25
     df4:	cc 0f       	add	r28, r28
     df6:	dd 1f       	adc	r29, r29
     df8:	cc 0f       	add	r28, r28
     dfa:	dd 1f       	adc	r29, r29
     dfc:	cc 0f       	add	r28, r28
     dfe:	dd 1f       	adc	r29, r29
     e00:	c8 50       	subi	r28, 0x08	; 8
     e02:	df 4d       	sbci	r29, 0xDF	; 223
     e04:	1e 86       	std	Y+14, r1	; 0x0e
     e06:	1f 86       	std	Y+15, r1	; 0x0f
     e08:	2a 87       	std	Y+10, r18	; 0x0a
     e0a:	3b 87       	std	Y+11, r19	; 0x0b
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	2d 91       	ld	r18, X+
     e10:	3c 91       	ld	r19, X
     e12:	12 97       	sbiw	r26, 0x02	; 2
     e14:	15 96       	adiw	r26, 0x05	; 5
     e16:	8d 91       	ld	r24, X+
     e18:	9c 91       	ld	r25, X
     e1a:	16 97       	sbiw	r26, 0x06	; 6
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	8c 87       	std	Y+12, r24	; 0x0c
     e22:	9d 87       	std	Y+13, r25	; 0x0d
     e24:	f7 01       	movw	r30, r14
     e26:	02 e0       	ldi	r16, 0x02	; 2
     e28:	06 93       	lac	Z, r16
     e2a:	ca c0       	rjmp	.+404    	; 0xfc0 <udd_ep_trans_complet+0x29c>
     e2c:	d8 01       	movw	r26, r16
     e2e:	8c 91       	ld	r24, X
     e30:	81 ff       	sbrs	r24, 1
     e32:	b3 c0       	rjmp	.+358    	; 0xf9a <udd_ep_trans_complet+0x276>
     e34:	8d 7f       	andi	r24, 0xFD	; 253
     e36:	8c 93       	st	X, r24
     e38:	cc 0f       	add	r28, r28
     e3a:	dd 1f       	adc	r29, r29
     e3c:	cc 0f       	add	r28, r28
     e3e:	dd 1f       	adc	r29, r29
     e40:	cc 0f       	add	r28, r28
     e42:	dd 1f       	adc	r29, r29
     e44:	c8 50       	subi	r28, 0x08	; 8
     e46:	df 4d       	sbci	r29, 0xDF	; 223
     e48:	1e 86       	std	Y+14, r1	; 0x0e
     e4a:	1f 86       	std	Y+15, r1	; 0x0f
     e4c:	1a 86       	std	Y+10, r1	; 0x0a
     e4e:	1b 86       	std	Y+11, r1	; 0x0b
     e50:	f7 01       	movw	r30, r14
     e52:	02 e0       	ldi	r16, 0x02	; 2
     e54:	06 93       	lac	Z, r16
     e56:	b4 c0       	rjmp	.+360    	; 0xfc0 <udd_ep_trans_complet+0x29c>
     e58:	fe 01       	movw	r30, r28
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	ee 0f       	add	r30, r30
     e60:	ff 1f       	adc	r31, r31
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	e8 50       	subi	r30, 0x08	; 8
     e68:	ff 4d       	sbci	r31, 0xDF	; 223
     e6a:	a2 84       	ldd	r10, Z+10	; 0x0a
     e6c:	b3 84       	ldd	r11, Z+11	; 0x0b
     e6e:	d8 01       	movw	r26, r16
     e70:	8c 91       	ld	r24, X
     e72:	82 ff       	sbrs	r24, 2
     e74:	19 c0       	rjmp	.+50     	; 0xea8 <udd_ep_trans_complet+0x184>
     e76:	11 96       	adiw	r26, 0x01	; 1
     e78:	ed 91       	ld	r30, X+
     e7a:	fc 91       	ld	r31, X
     e7c:	12 97       	sbiw	r26, 0x02	; 2
     e7e:	15 96       	adiw	r26, 0x05	; 5
     e80:	2d 91       	ld	r18, X+
     e82:	3c 91       	ld	r19, X
     e84:	16 97       	sbiw	r26, 0x06	; 6
     e86:	13 96       	adiw	r26, 0x03	; 3
     e88:	8d 91       	ld	r24, X+
     e8a:	9c 91       	ld	r25, X
     e8c:	14 97       	sbiw	r26, 0x04	; 4
     e8e:	b4 01       	movw	r22, r8
     e90:	ab d5       	rcall	.+2902   	; 0x19e8 <__udivmodhi4>
     e92:	b0 e4       	ldi	r27, 0x40	; 64
     e94:	db 9e       	mul	r13, r27
     e96:	b0 01       	movw	r22, r0
     e98:	11 24       	eor	r1, r1
     e9a:	67 5a       	subi	r22, 0xA7	; 167
     e9c:	7f 4d       	sbci	r23, 0xDF	; 223
     e9e:	ac 01       	movw	r20, r24
     ea0:	cf 01       	movw	r24, r30
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	bc d5       	rcall	.+2936   	; 0x1a20 <memcpy>
     ea8:	f8 01       	movw	r30, r16
     eaa:	25 81       	ldd	r18, Z+5	; 0x05
     eac:	36 81       	ldd	r19, Z+6	; 0x06
     eae:	2a 0d       	add	r18, r10
     eb0:	3b 1d       	adc	r19, r11
     eb2:	25 83       	std	Z+5, r18	; 0x05
     eb4:	36 83       	std	Z+6, r19	; 0x06
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	94 81       	ldd	r25, Z+4	; 0x04
     eba:	82 17       	cp	r24, r18
     ebc:	93 07       	cpc	r25, r19
     ebe:	68 f4       	brcc	.+26     	; 0xeda <udd_ep_trans_complet+0x1b6>
     ec0:	85 83       	std	Z+5, r24	; 0x05
     ec2:	96 83       	std	Z+6, r25	; 0x06
     ec4:	cc 0f       	add	r28, r28
     ec6:	dd 1f       	adc	r29, r29
     ec8:	cc 0f       	add	r28, r28
     eca:	dd 1f       	adc	r29, r29
     ecc:	cc 0f       	add	r28, r28
     ece:	dd 1f       	adc	r29, r29
     ed0:	c8 50       	subi	r28, 0x08	; 8
     ed2:	df 4d       	sbci	r29, 0xDF	; 223
     ed4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed8:	60 c0       	rjmp	.+192    	; 0xf9a <udd_ep_trans_complet+0x276>
     eda:	fe 01       	movw	r30, r28
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	e8 50       	subi	r30, 0x08	; 8
     eea:	ff 4d       	sbci	r31, 0xDF	; 223
     eec:	46 85       	ldd	r20, Z+14	; 0x0e
     eee:	57 85       	ldd	r21, Z+15	; 0x0f
     ef0:	4a 15       	cp	r20, r10
     ef2:	5b 05       	cpc	r21, r11
     ef4:	09 f0       	breq	.+2      	; 0xef8 <udd_ep_trans_complet+0x1d4>
     ef6:	51 c0       	rjmp	.+162    	; 0xf9a <udd_ep_trans_complet+0x276>
     ef8:	28 17       	cp	r18, r24
     efa:	39 07       	cpc	r19, r25
     efc:	09 f4       	brne	.+2      	; 0xf00 <udd_ep_trans_complet+0x1dc>
     efe:	4d c0       	rjmp	.+154    	; 0xf9a <udd_ep_trans_complet+0x276>
     f00:	ac 01       	movw	r20, r24
     f02:	42 1b       	sub	r20, r18
     f04:	53 0b       	sbc	r21, r19
     f06:	9a 01       	movw	r18, r20
     f08:	21 15       	cp	r18, r1
     f0a:	54 e0       	ldi	r21, 0x04	; 4
     f0c:	35 07       	cpc	r19, r21
     f0e:	50 f0       	brcs	.+20     	; 0xf24 <udd_ep_trans_complet+0x200>
     f10:	2f ef       	ldi	r18, 0xFF	; 255
     f12:	33 e0       	ldi	r19, 0x03	; 3
     f14:	c9 01       	movw	r24, r18
     f16:	b4 01       	movw	r22, r8
     f18:	67 d5       	rcall	.+2766   	; 0x19e8 <__udivmodhi4>
     f1a:	d9 01       	movw	r26, r18
     f1c:	a8 1b       	sub	r26, r24
     f1e:	b9 0b       	sbc	r27, r25
     f20:	cd 01       	movw	r24, r26
     f22:	07 c0       	rjmp	.+14     	; 0xf32 <udd_ep_trans_complet+0x20e>
     f24:	c9 01       	movw	r24, r18
     f26:	b4 01       	movw	r22, r8
     f28:	5f d5       	rcall	.+2750   	; 0x19e8 <__udivmodhi4>
     f2a:	f9 01       	movw	r30, r18
     f2c:	e8 1b       	sub	r30, r24
     f2e:	f9 0b       	sbc	r31, r25
     f30:	cf 01       	movw	r24, r30
     f32:	fe 01       	movw	r30, r28
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	ee 0f       	add	r30, r30
     f3e:	ff 1f       	adc	r31, r31
     f40:	e8 50       	subi	r30, 0x08	; 8
     f42:	ff 4d       	sbci	r31, 0xDF	; 223
     f44:	12 86       	std	Z+10, r1	; 0x0a
     f46:	13 86       	std	Z+11, r1	; 0x0b
     f48:	88 15       	cp	r24, r8
     f4a:	99 05       	cpc	r25, r9
     f4c:	78 f4       	brcc	.+30     	; 0xf6c <udd_ep_trans_complet+0x248>
     f4e:	d8 01       	movw	r26, r16
     f50:	8c 91       	ld	r24, X
     f52:	84 60       	ori	r24, 0x04	; 4
     f54:	8c 93       	st	X, r24
     f56:	b0 e4       	ldi	r27, 0x40	; 64
     f58:	db 9e       	mul	r13, r27
     f5a:	c0 01       	movw	r24, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	87 5a       	subi	r24, 0xA7	; 167
     f60:	9f 4d       	sbci	r25, 0xDF	; 223
     f62:	84 87       	std	Z+12, r24	; 0x0c
     f64:	95 87       	std	Z+13, r25	; 0x0d
     f66:	86 86       	std	Z+14, r8	; 0x0e
     f68:	97 86       	std	Z+15, r9	; 0x0f
     f6a:	13 c0       	rjmp	.+38     	; 0xf92 <udd_ep_trans_complet+0x26e>
     f6c:	f8 01       	movw	r30, r16
     f6e:	41 81       	ldd	r20, Z+1	; 0x01
     f70:	52 81       	ldd	r21, Z+2	; 0x02
     f72:	25 81       	ldd	r18, Z+5	; 0x05
     f74:	36 81       	ldd	r19, Z+6	; 0x06
     f76:	24 0f       	add	r18, r20
     f78:	35 1f       	adc	r19, r21
     f7a:	cc 0f       	add	r28, r28
     f7c:	dd 1f       	adc	r29, r29
     f7e:	cc 0f       	add	r28, r28
     f80:	dd 1f       	adc	r29, r29
     f82:	cc 0f       	add	r28, r28
     f84:	dd 1f       	adc	r29, r29
     f86:	c8 50       	subi	r28, 0x08	; 8
     f88:	df 4d       	sbci	r29, 0xDF	; 223
     f8a:	2c 87       	std	Y+12, r18	; 0x0c
     f8c:	3d 87       	std	Y+13, r19	; 0x0d
     f8e:	8e 87       	std	Y+14, r24	; 0x0e
     f90:	9f 87       	std	Y+15, r25	; 0x0f
     f92:	f7 01       	movw	r30, r14
     f94:	02 e0       	ldi	r16, 0x02	; 2
     f96:	06 93       	lac	Z, r16
     f98:	13 c0       	rjmp	.+38     	; 0xfc0 <udd_ep_trans_complet+0x29c>
     f9a:	d8 01       	movw	r26, r16
     f9c:	8c 91       	ld	r24, X
     f9e:	80 ff       	sbrs	r24, 0
     fa0:	0f c0       	rjmp	.+30     	; 0xfc0 <udd_ep_trans_complet+0x29c>
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	8c 93       	st	X, r24
     fa6:	17 96       	adiw	r26, 0x07	; 7
     fa8:	ed 91       	ld	r30, X+
     faa:	fc 91       	ld	r31, X
     fac:	18 97       	sbiw	r26, 0x08	; 8
     fae:	30 97       	sbiw	r30, 0x00	; 0
     fb0:	39 f0       	breq	.+14     	; 0xfc0 <udd_ep_trans_complet+0x29c>
     fb2:	15 96       	adiw	r26, 0x05	; 5
     fb4:	6d 91       	ld	r22, X+
     fb6:	7c 91       	ld	r23, X
     fb8:	16 97       	sbiw	r26, 0x06	; 6
     fba:	4d 2d       	mov	r20, r13
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	19 95       	eicall
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	08 95       	ret

00000fd8 <udd_attach>:
     fd8:	cf 93       	push	r28
     fda:	cf b7       	in	r28, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	0f dd       	rcall	.-1506   	; 0xa00 <udd_sleep_mode>
     fe2:	ea ec       	ldi	r30, 0xCA	; 202
     fe4:	f4 e0       	ldi	r31, 0x04	; 4
     fe6:	80 e4       	ldi	r24, 0x40	; 64
     fe8:	80 83       	st	Z, r24
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	80 83       	st	Z, r24
     fee:	e1 ec       	ldi	r30, 0xC1	; 193
     ff0:	f4 e0       	ldi	r31, 0x04	; 4
     ff2:	80 81       	ld	r24, Z
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	80 83       	st	Z, r24
     ff8:	a9 ec       	ldi	r26, 0xC9	; 201
     ffa:	b4 e0       	ldi	r27, 0x04	; 4
     ffc:	8c 91       	ld	r24, X
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	8c 93       	st	X, r24
    1002:	e8 ec       	ldi	r30, 0xC8	; 200
    1004:	f4 e0       	ldi	r31, 0x04	; 4
    1006:	80 81       	ld	r24, Z
    1008:	80 64       	ori	r24, 0x40	; 64
    100a:	80 83       	st	Z, r24
    100c:	8c 91       	ld	r24, X
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	8c 93       	st	X, r24
    1012:	80 81       	ld	r24, Z
    1014:	80 68       	ori	r24, 0x80	; 128
    1016:	80 83       	st	Z, r24
    1018:	cf bf       	out	0x3f, r28	; 63
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <udd_enable>:
    101e:	cf 93       	push	r28
    1020:	80 e3       	ldi	r24, 0x30	; 48
    1022:	2d d4       	rcall	.+2138   	; 0x187e <sysclk_enable_usb>
    1024:	e0 ec       	ldi	r30, 0xC0	; 192
    1026:	f4 e0       	ldi	r31, 0x04	; 4
    1028:	80 81       	ld	r24, Z
    102a:	80 64       	ori	r24, 0x40	; 64
    102c:	80 83       	st	Z, r24
    102e:	cf b7       	in	r28, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	e8 ef       	ldi	r30, 0xF8	; 248
    1034:	f0 e2       	ldi	r31, 0x20	; 32
    1036:	11 86       	std	Z+9, r1	; 0x09
    1038:	11 8a       	std	Z+17, r1	; 0x11
    103a:	11 8e       	std	Z+25, r1	; 0x19
    103c:	11 a2       	std	Z+33, r1	; 0x21
    103e:	e9 ed       	ldi	r30, 0xD9	; 217
    1040:	f0 e2       	ldi	r31, 0x20	; 32
    1042:	80 81       	ld	r24, Z
    1044:	8e 7f       	andi	r24, 0xFE	; 254
    1046:	80 83       	st	Z, r24
    1048:	e2 ee       	ldi	r30, 0xE2	; 226
    104a:	f0 e2       	ldi	r31, 0x20	; 32
    104c:	80 81       	ld	r24, Z
    104e:	8e 7f       	andi	r24, 0xFE	; 254
    1050:	80 83       	st	Z, r24
    1052:	6a e1       	ldi	r22, 0x1A	; 26
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	2e d4       	rcall	.+2140   	; 0x18b6 <nvm_read_byte>
    105a:	8f 3f       	cpi	r24, 0xFF	; 255
    105c:	19 f0       	breq	.+6      	; 0x1064 <udd_enable+0x46>
    105e:	80 93 fa 04 	sts	0x04FA, r24
    1062:	03 c0       	rjmp	.+6      	; 0x106a <udd_enable+0x4c>
    1064:	8f e1       	ldi	r24, 0x1F	; 31
    1066:	80 93 fa 04 	sts	0x04FA, r24
    106a:	6b e1       	ldi	r22, 0x1B	; 27
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	22 d4       	rcall	.+2116   	; 0x18b6 <nvm_read_byte>
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	19 f0       	breq	.+6      	; 0x107c <udd_enable+0x5e>
    1076:	80 93 fb 04 	sts	0x04FB, r24
    107a:	03 c0       	rjmp	.+6      	; 0x1082 <udd_enable+0x64>
    107c:	8f e1       	ldi	r24, 0x1F	; 31
    107e:	80 93 fb 04 	sts	0x04FB, r24
    1082:	e0 ec       	ldi	r30, 0xC0	; 192
    1084:	f4 e0       	ldi	r31, 0x04	; 4
    1086:	80 81       	ld	r24, Z
    1088:	81 60       	ori	r24, 0x01	; 1
    108a:	80 83       	st	Z, r24
    108c:	80 81       	ld	r24, Z
    108e:	80 68       	ori	r24, 0x80	; 128
    1090:	80 83       	st	Z, r24
    1092:	80 81       	ld	r24, Z
    1094:	80 61       	ori	r24, 0x10	; 16
    1096:	80 83       	st	Z, r24
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	91 e2       	ldi	r25, 0x21	; 33
    109c:	86 83       	std	Z+6, r24	; 0x06
    109e:	97 83       	std	Z+7, r25	; 0x07
    10a0:	80 81       	ld	r24, Z
    10a2:	80 62       	ori	r24, 0x20	; 32
    10a4:	80 83       	st	Z, r24
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	80 93 c5 04 	sts	0x04C5, r24
    10ac:	e8 ec       	ldi	r30, 0xC8	; 200
    10ae:	f4 e0       	ldi	r31, 0x04	; 4
    10b0:	80 81       	ld	r24, Z
    10b2:	81 60       	ori	r24, 0x01	; 1
    10b4:	80 83       	st	Z, r24
    10b6:	10 92 24 21 	sts	0x2124, r1
    10ba:	80 91 3a 21 	lds	r24, 0x213A
    10be:	8f 3f       	cpi	r24, 0xFF	; 255
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <udd_enable+0xa6>
    10c2:	ff cf       	rjmp	.-2      	; 0x10c2 <udd_enable+0xa4>
    10c4:	9f b7       	in	r25, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	e5 e3       	ldi	r30, 0x35	; 53
    10ca:	f1 e2       	ldi	r31, 0x21	; 33
    10cc:	85 81       	ldd	r24, Z+5	; 0x05
    10ce:	8f 5f       	subi	r24, 0xFF	; 255
    10d0:	85 83       	std	Z+5, r24	; 0x05
    10d2:	9f bf       	out	0x3f, r25	; 63
    10d4:	81 df       	rcall	.-254    	; 0xfd8 <udd_attach>
    10d6:	cf bf       	out	0x3f, r28	; 63
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <udd_set_address>:
    10dc:	80 93 c3 04 	sts	0x04C3, r24
    10e0:	08 95       	ret

000010e2 <udd_getaddress>:
    10e2:	80 91 c3 04 	lds	r24, 0x04C3
    10e6:	08 95       	ret

000010e8 <udd_set_setup_payload>:
    10e8:	e5 e2       	ldi	r30, 0x25	; 37
    10ea:	f1 e2       	ldi	r31, 0x21	; 33
    10ec:	80 87       	std	Z+8, r24	; 0x08
    10ee:	91 87       	std	Z+9, r25	; 0x09
    10f0:	62 87       	std	Z+10, r22	; 0x0a
    10f2:	73 87       	std	Z+11, r23	; 0x0b
    10f4:	08 95       	ret

000010f6 <udd_ep_alloc>:
    10f6:	28 2f       	mov	r18, r24
    10f8:	2f 70       	andi	r18, 0x0F	; 15
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	08 2e       	mov	r0, r24
    1102:	00 0c       	add	r0, r0
    1104:	99 0b       	sbc	r25, r25
    1106:	88 27       	eor	r24, r24
    1108:	99 0f       	add	r25, r25
    110a:	88 1f       	adc	r24, r24
    110c:	99 27       	eor	r25, r25
    110e:	82 0f       	add	r24, r18
    1110:	93 1f       	adc	r25, r19
    1112:	fc 01       	movw	r30, r24
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	e8 50       	subi	r30, 0x08	; 8
    1122:	ff 4d       	sbci	r31, 0xDF	; 223
    1124:	21 85       	ldd	r18, Z+9	; 0x09
    1126:	20 7c       	andi	r18, 0xC0	; 192
    1128:	09 f0       	breq	.+2      	; 0x112c <udd_ep_alloc+0x36>
    112a:	72 c0       	rjmp	.+228    	; 0x1210 <udd_ep_alloc+0x11a>
    112c:	63 70       	andi	r22, 0x03	; 3
    112e:	61 30       	cpi	r22, 0x01	; 1
    1130:	11 f0       	breq	.+4      	; 0x1136 <udd_ep_alloc+0x40>
    1132:	18 f4       	brcc	.+6      	; 0x113a <udd_ep_alloc+0x44>
    1134:	04 c0       	rjmp	.+8      	; 0x113e <udd_ep_alloc+0x48>
    1136:	20 ec       	ldi	r18, 0xC0	; 192
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <udd_ep_alloc+0x4a>
    113a:	20 e8       	ldi	r18, 0x80	; 128
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <udd_ep_alloc+0x4a>
    113e:	20 e4       	ldi	r18, 0x40	; 64
    1140:	40 38       	cpi	r20, 0x80	; 128
    1142:	51 05       	cpc	r21, r1
    1144:	e9 f0       	breq	.+58     	; 0x1180 <udd_ep_alloc+0x8a>
    1146:	50 f4       	brcc	.+20     	; 0x115c <udd_ep_alloc+0x66>
    1148:	40 32       	cpi	r20, 0x20	; 32
    114a:	51 05       	cpc	r21, r1
    114c:	a9 f0       	breq	.+42     	; 0x1178 <udd_ep_alloc+0x82>
    114e:	40 34       	cpi	r20, 0x40	; 64
    1150:	51 05       	cpc	r21, r1
    1152:	a1 f0       	breq	.+40     	; 0x117c <udd_ep_alloc+0x86>
    1154:	40 31       	cpi	r20, 0x10	; 16
    1156:	51 05       	cpc	r21, r1
    1158:	d9 f4       	brne	.+54     	; 0x1190 <udd_ep_alloc+0x9a>
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <udd_ep_alloc+0x7e>
    115c:	41 15       	cp	r20, r1
    115e:	32 e0       	ldi	r19, 0x02	; 2
    1160:	53 07       	cpc	r21, r19
    1162:	91 f0       	breq	.+36     	; 0x1188 <udd_ep_alloc+0x92>
    1164:	4f 3f       	cpi	r20, 0xFF	; 255
    1166:	33 e0       	ldi	r19, 0x03	; 3
    1168:	53 07       	cpc	r21, r19
    116a:	81 f0       	breq	.+32     	; 0x118c <udd_ep_alloc+0x96>
    116c:	41 15       	cp	r20, r1
    116e:	51 40       	sbci	r21, 0x01	; 1
    1170:	79 f4       	brne	.+30     	; 0x1190 <udd_ep_alloc+0x9a>
    1172:	08 c0       	rjmp	.+16     	; 0x1184 <udd_ep_alloc+0x8e>
    1174:	41 e0       	ldi	r20, 0x01	; 1
    1176:	0d c0       	rjmp	.+26     	; 0x1192 <udd_ep_alloc+0x9c>
    1178:	42 e0       	ldi	r20, 0x02	; 2
    117a:	0b c0       	rjmp	.+22     	; 0x1192 <udd_ep_alloc+0x9c>
    117c:	43 e0       	ldi	r20, 0x03	; 3
    117e:	09 c0       	rjmp	.+18     	; 0x1192 <udd_ep_alloc+0x9c>
    1180:	44 e0       	ldi	r20, 0x04	; 4
    1182:	07 c0       	rjmp	.+14     	; 0x1192 <udd_ep_alloc+0x9c>
    1184:	45 e0       	ldi	r20, 0x05	; 5
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <udd_ep_alloc+0x9c>
    1188:	46 e0       	ldi	r20, 0x06	; 6
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <udd_ep_alloc+0x9c>
    118c:	47 e0       	ldi	r20, 0x07	; 7
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <udd_ep_alloc+0x9c>
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	ee 0f       	add	r30, r30
    119e:	ff 1f       	adc	r31, r31
    11a0:	e8 50       	subi	r30, 0x08	; 8
    11a2:	ff 4d       	sbci	r31, 0xDF	; 223
    11a4:	11 86       	std	Z+9, r1	; 0x09
    11a6:	dc 01       	movw	r26, r24
    11a8:	aa 0f       	add	r26, r26
    11aa:	bb 1f       	adc	r27, r27
    11ac:	aa 0f       	add	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	aa 0f       	add	r26, r26
    11b2:	bb 1f       	adc	r27, r27
    11b4:	a0 50       	subi	r26, 0x00	; 0
    11b6:	bf 4d       	sbci	r27, 0xDF	; 223
    11b8:	36 e0       	ldi	r19, 0x06	; 6
    11ba:	3c 93       	st	X, r19
    11bc:	24 2b       	or	r18, r20
    11be:	21 87       	std	Z+9, r18	; 0x09
    11c0:	fc 01       	movw	r30, r24
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	e8 50       	subi	r30, 0x08	; 8
    11d0:	ff 4d       	sbci	r31, 0xDF	; 223
    11d2:	21 85       	ldd	r18, Z+9	; 0x09
    11d4:	20 7c       	andi	r18, 0xC0	; 192
    11d6:	20 3c       	cpi	r18, 0xC0	; 192
    11d8:	69 f4       	brne	.+26     	; 0x11f4 <udd_ep_alloc+0xfe>
    11da:	fc 01       	movw	r30, r24
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	e8 50       	subi	r30, 0x08	; 8
    11ea:	ff 4d       	sbci	r31, 0xDF	; 223
    11ec:	21 85       	ldd	r18, Z+9	; 0x09
    11ee:	27 70       	andi	r18, 0x07	; 7
    11f0:	27 30       	cpi	r18, 0x07	; 7
    11f2:	81 f0       	breq	.+32     	; 0x1214 <udd_ep_alloc+0x11e>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	fc 01       	movw	r30, r24
    1202:	e8 50       	subi	r30, 0x08	; 8
    1204:	ff 4d       	sbci	r31, 0xDF	; 223
    1206:	81 85       	ldd	r24, Z+9	; 0x09
    1208:	80 62       	ori	r24, 0x20	; 32
    120a:	81 87       	std	Z+9, r24	; 0x09
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	08 95       	ret
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	08 95       	ret
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	08 95       	ret

00001218 <udd_ep_is_halted>:
    1218:	e8 2f       	mov	r30, r24
    121a:	ef 70       	andi	r30, 0x0F	; 15
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	08 2e       	mov	r0, r24
    1224:	00 0c       	add	r0, r0
    1226:	99 0b       	sbc	r25, r25
    1228:	88 27       	eor	r24, r24
    122a:	99 0f       	add	r25, r25
    122c:	88 1f       	adc	r24, r24
    122e:	99 27       	eor	r25, r25
    1230:	e8 0f       	add	r30, r24
    1232:	f9 1f       	adc	r31, r25
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	e8 50       	subi	r30, 0x08	; 8
    1242:	ff 4d       	sbci	r31, 0xDF	; 223
    1244:	81 85       	ldd	r24, Z+9	; 0x09
    1246:	82 fb       	bst	r24, 2
    1248:	88 27       	eor	r24, r24
    124a:	80 f9       	bld	r24, 0
    124c:	08 95       	ret

0000124e <udd_ep_clear_halt>:
    124e:	0f 93       	push	r16
    1250:	28 2f       	mov	r18, r24
    1252:	2f 70       	andi	r18, 0x0F	; 15
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	a9 01       	movw	r20, r18
    1258:	44 0f       	add	r20, r20
    125a:	55 1f       	adc	r21, r21
    125c:	28 2f       	mov	r18, r24
    125e:	08 2e       	mov	r0, r24
    1260:	00 0c       	add	r0, r0
    1262:	33 0b       	sbc	r19, r19
    1264:	22 27       	eor	r18, r18
    1266:	33 0f       	add	r19, r19
    1268:	22 1f       	adc	r18, r18
    126a:	33 27       	eor	r19, r19
    126c:	24 0f       	add	r18, r20
    126e:	35 1f       	adc	r19, r21
    1270:	f9 01       	movw	r30, r18
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	e0 50       	subi	r30, 0x00	; 0
    1280:	ff 4d       	sbci	r31, 0xDF	; 223
    1282:	01 e0       	ldi	r16, 0x01	; 1
    1284:	06 93       	lac	Z, r16
    1286:	f9 01       	movw	r30, r18
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	e8 50       	subi	r30, 0x08	; 8
    1296:	ff 4d       	sbci	r31, 0xDF	; 223
    1298:	91 85       	ldd	r25, Z+9	; 0x09
    129a:	92 ff       	sbrs	r25, 2
    129c:	17 c0       	rjmp	.+46     	; 0x12cc <udd_ep_clear_halt+0x7e>
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	f9 01       	movw	r30, r18
    12ac:	e8 50       	subi	r30, 0x08	; 8
    12ae:	ff 4d       	sbci	r31, 0xDF	; 223
    12b0:	91 85       	ldd	r25, Z+9	; 0x09
    12b2:	9b 7f       	andi	r25, 0xFB	; 251
    12b4:	91 87       	std	Z+9, r25	; 0x09
    12b6:	ac dc       	rcall	.-1704   	; 0xc10 <udd_ep_get_job>
    12b8:	fc 01       	movw	r30, r24
    12ba:	80 81       	ld	r24, Z
    12bc:	80 ff       	sbrs	r24, 0
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <udd_ep_clear_halt+0x7e>
    12c0:	8e 7f       	andi	r24, 0xFE	; 254
    12c2:	80 83       	st	Z, r24
    12c4:	07 80       	ldd	r0, Z+7	; 0x07
    12c6:	f0 85       	ldd	r31, Z+8	; 0x08
    12c8:	e0 2d       	mov	r30, r0
    12ca:	19 95       	eicall
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <udd_ep_abort>:
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	18 2f       	mov	r17, r24
    12de:	f8 2e       	mov	r15, r24
    12e0:	ff 1c       	adc	r15, r15
    12e2:	ff 24       	eor	r15, r15
    12e4:	ff 1c       	adc	r15, r15
    12e6:	c8 2f       	mov	r28, r24
    12e8:	cf 70       	andi	r28, 0x0F	; 15
    12ea:	d0 e0       	ldi	r29, 0x00	; 0
    12ec:	cc 0f       	add	r28, r28
    12ee:	dd 1f       	adc	r29, r29
    12f0:	cf 0d       	add	r28, r15
    12f2:	d1 1d       	adc	r29, r1
    12f4:	8d dc       	rcall	.-1766   	; 0xc10 <udd_ep_get_job>
    12f6:	dc 01       	movw	r26, r24
    12f8:	fe 01       	movw	r30, r28
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	e0 50       	subi	r30, 0x00	; 0
    1308:	ff 4d       	sbci	r31, 0xDF	; 223
    130a:	02 e0       	ldi	r16, 0x02	; 2
    130c:	05 93       	las	Z, r16
    130e:	8c 91       	ld	r24, X
    1310:	80 ff       	sbrs	r24, 0
    1312:	22 c0       	rjmp	.+68     	; 0x1358 <udd_ep_abort+0x86>
    1314:	8e 7f       	andi	r24, 0xFE	; 254
    1316:	8c 93       	st	X, r24
    1318:	17 96       	adiw	r26, 0x07	; 7
    131a:	ed 91       	ld	r30, X+
    131c:	fc 91       	ld	r31, X
    131e:	18 97       	sbiw	r26, 0x08	; 8
    1320:	30 97       	sbiw	r30, 0x00	; 0
    1322:	d1 f0       	breq	.+52     	; 0x1358 <udd_ep_abort+0x86>
    1324:	ff 20       	and	r15, r15
    1326:	59 f0       	breq	.+22     	; 0x133e <udd_ep_abort+0x6c>
    1328:	cc 0f       	add	r28, r28
    132a:	dd 1f       	adc	r29, r29
    132c:	cc 0f       	add	r28, r28
    132e:	dd 1f       	adc	r29, r29
    1330:	cc 0f       	add	r28, r28
    1332:	dd 1f       	adc	r29, r29
    1334:	c8 50       	subi	r28, 0x08	; 8
    1336:	df 4d       	sbci	r29, 0xDF	; 223
    1338:	6e 85       	ldd	r22, Y+14	; 0x0e
    133a:	7f 85       	ldd	r23, Y+15	; 0x0f
    133c:	0a c0       	rjmp	.+20     	; 0x1352 <udd_ep_abort+0x80>
    133e:	cc 0f       	add	r28, r28
    1340:	dd 1f       	adc	r29, r29
    1342:	cc 0f       	add	r28, r28
    1344:	dd 1f       	adc	r29, r29
    1346:	cc 0f       	add	r28, r28
    1348:	dd 1f       	adc	r29, r29
    134a:	c8 50       	subi	r28, 0x08	; 8
    134c:	df 4d       	sbci	r29, 0xDF	; 223
    134e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1350:	7b 85       	ldd	r23, Y+11	; 0x0b
    1352:	41 2f       	mov	r20, r17
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	19 95       	eicall
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	08 95       	ret

00001364 <udd_ep_free>:
    1364:	cf 93       	push	r28
    1366:	c8 2f       	mov	r28, r24
    1368:	b4 df       	rcall	.-152    	; 0x12d2 <udd_ep_abort>
    136a:	ec 2f       	mov	r30, r28
    136c:	ef 70       	andi	r30, 0x0F	; 15
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	8c 2f       	mov	r24, r28
    1376:	cc 0f       	add	r28, r28
    1378:	99 0b       	sbc	r25, r25
    137a:	88 27       	eor	r24, r24
    137c:	99 0f       	add	r25, r25
    137e:	88 1f       	adc	r24, r24
    1380:	99 27       	eor	r25, r25
    1382:	e8 0f       	add	r30, r24
    1384:	f9 1f       	adc	r31, r25
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	e8 50       	subi	r30, 0x08	; 8
    1394:	ff 4d       	sbci	r31, 0xDF	; 223
    1396:	11 86       	std	Z+9, r1	; 0x09
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <udd_ep_set_halt>:
    139c:	e8 2f       	mov	r30, r24
    139e:	ef 70       	andi	r30, 0x0F	; 15
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	28 2f       	mov	r18, r24
    13a8:	08 2e       	mov	r0, r24
    13aa:	00 0c       	add	r0, r0
    13ac:	33 0b       	sbc	r19, r19
    13ae:	22 27       	eor	r18, r18
    13b0:	33 0f       	add	r19, r19
    13b2:	22 1f       	adc	r18, r18
    13b4:	33 27       	eor	r19, r19
    13b6:	e2 0f       	add	r30, r18
    13b8:	f3 1f       	adc	r31, r19
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	e8 50       	subi	r30, 0x08	; 8
    13c8:	ff 4d       	sbci	r31, 0xDF	; 223
    13ca:	91 85       	ldd	r25, Z+9	; 0x09
    13cc:	94 60       	ori	r25, 0x04	; 4
    13ce:	91 87       	std	Z+9, r25	; 0x09
    13d0:	80 df       	rcall	.-256    	; 0x12d2 <udd_ep_abort>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	08 95       	ret

000013d6 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	0b b6       	in	r0, 0x3b	; 59
    13e2:	0f 92       	push	r0
    13e4:	0f 93       	push	r16
    13e6:	2f 93       	push	r18
    13e8:	3f 93       	push	r19
    13ea:	4f 93       	push	r20
    13ec:	5f 93       	push	r21
    13ee:	6f 93       	push	r22
    13f0:	7f 93       	push	r23
    13f2:	8f 93       	push	r24
    13f4:	9f 93       	push	r25
    13f6:	af 93       	push	r26
    13f8:	bf 93       	push	r27
    13fa:	ef 93       	push	r30
    13fc:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    13fe:	80 91 cb 04 	lds	r24, 0x04CB
    1402:	88 23       	and	r24, r24
    1404:	2c f4       	brge	.+10     	; 0x1410 <__vector_125+0x3a>
		udd_ack_start_of_frame_event();
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    140c:	73 d8       	rcall	.-3866   	; 0x4f4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    140e:	7e c0       	rjmp	.+252    	; 0x150c <__vector_125+0x136>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1410:	80 91 cb 04 	lds	r24, 0x04CB
    1414:	82 ff       	sbrs	r24, 2
    1416:	20 c0       	rjmp	.+64     	; 0x1458 <__vector_125+0x82>
		udd_ack_underflow_event();
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    141e:	80 91 08 21 	lds	r24, 0x2108
    1422:	86 ff       	sbrs	r24, 6
    1424:	73 c0       	rjmp	.+230    	; 0x150c <__vector_125+0x136>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1426:	80 91 cc 04 	lds	r24, 0x04CC
    142a:	81 fd       	sbrc	r24, 1
    142c:	6f c0       	rjmp	.+222    	; 0x150c <__vector_125+0x136>
    142e:	0b dc       	rcall	.-2026   	; 0xc46 <udd_ctrl_interrupt_tc_setup>
    1430:	81 11       	cpse	r24, r1
    1432:	6c c0       	rjmp	.+216    	; 0x150c <__vector_125+0x136>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1434:	80 91 f7 20 	lds	r24, 0x20F7
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	11 f4       	brne	.+4      	; 0x1440 <__vector_125+0x6a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    143c:	3f db       	rcall	.-2434   	; 0xabc <udd_ctrl_send_zlp_in>
    143e:	66 c0       	rjmp	.+204    	; 0x150c <__vector_125+0x136>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1440:	84 30       	cpi	r24, 0x04	; 4
    1442:	09 f0       	breq	.+2      	; 0x1446 <__vector_125+0x70>
    1444:	63 c0       	rjmp	.+198    	; 0x150c <__vector_125+0x136>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1446:	e9 e0       	ldi	r30, 0x09	; 9
    1448:	f1 e2       	ldi	r31, 0x21	; 33
    144a:	04 e0       	ldi	r16, 0x04	; 4
    144c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    144e:	e1 e0       	ldi	r30, 0x01	; 1
    1450:	f1 e2       	ldi	r31, 0x21	; 33
    1452:	04 e0       	ldi	r16, 0x04	; 4
    1454:	05 93       	las	Z, r16
    1456:	5a c0       	rjmp	.+180    	; 0x150c <__vector_125+0x136>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1458:	80 91 cb 04 	lds	r24, 0x04CB
    145c:	81 ff       	sbrs	r24, 1
    145e:	51 c0       	rjmp	.+162    	; 0x1502 <__vector_125+0x12c>
		udd_ack_overflow_event();
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1466:	80 91 00 21 	lds	r24, 0x2100
    146a:	86 ff       	sbrs	r24, 6
    146c:	4f c0       	rjmp	.+158    	; 0x150c <__vector_125+0x136>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    146e:	80 91 cc 04 	lds	r24, 0x04CC
    1472:	81 fd       	sbrc	r24, 1
    1474:	4b c0       	rjmp	.+150    	; 0x150c <__vector_125+0x136>
    1476:	e7 db       	rcall	.-2098   	; 0xc46 <udd_ctrl_interrupt_tc_setup>
    1478:	81 11       	cpse	r24, r1
    147a:	48 c0       	rjmp	.+144    	; 0x150c <__vector_125+0x136>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    147c:	80 91 f7 20 	lds	r24, 0x20F7
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	41 f4       	brne	.+16     	; 0x1494 <__vector_125+0xbe>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1484:	84 e0       	ldi	r24, 0x04	; 4
    1486:	80 93 f7 20 	sts	0x20F7, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    148a:	e0 e0       	ldi	r30, 0x00	; 0
    148c:	f1 e2       	ldi	r31, 0x21	; 33
    148e:	02 e0       	ldi	r16, 0x02	; 2
    1490:	06 93       	lac	Z, r16
    1492:	3c c0       	rjmp	.+120    	; 0x150c <__vector_125+0x136>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1494:	83 30       	cpi	r24, 0x03	; 3
    1496:	09 f0       	breq	.+2      	; 0x149a <__vector_125+0xc4>
    1498:	39 c0       	rjmp	.+114    	; 0x150c <__vector_125+0x136>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    149a:	e9 e0       	ldi	r30, 0x09	; 9
    149c:	f1 e2       	ldi	r31, 0x21	; 33
    149e:	04 e0       	ldi	r16, 0x04	; 4
    14a0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    14a2:	e1 e0       	ldi	r30, 0x01	; 1
    14a4:	f1 e2       	ldi	r31, 0x21	; 33
    14a6:	04 e0       	ldi	r16, 0x04	; 4
    14a8:	05 93       	las	Z, r16
    14aa:	30 c0       	rjmp	.+96     	; 0x150c <__vector_125+0x136>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    14ac:	80 e1       	ldi	r24, 0x10	; 16
    14ae:	80 93 ca 04 	sts	0x04CA, r24
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    14b2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    14b6:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    14ba:	e8 ef       	ldi	r30, 0xF8	; 248
    14bc:	f0 e2       	ldi	r31, 0x20	; 32
    14be:	11 86       	std	Z+9, r1	; 0x09
	udd_endpoint_clear_status(ep_ctrl);
    14c0:	96 e0       	ldi	r25, 0x06	; 6
    14c2:	90 87       	std	Z+8, r25	; 0x08
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    14c4:	80 e4       	ldi	r24, 0x40	; 64
    14c6:	81 87       	std	Z+9, r24	; 0x09
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    14c8:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    14ca:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    14cc:	81 8b       	std	Z+17, r24	; 0x11
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    14ce:	8b ee       	ldi	r24, 0xEB	; 235
    14d0:	90 e2       	ldi	r25, 0x20	; 32
    14d2:	84 87       	std	Z+12, r24	; 0x0c
    14d4:	95 87       	std	Z+13, r25	; 0x0d
		// Reset endpoint control management
		udd_ctrl_init();
    14d6:	bd da       	rcall	.-2694   	; 0xa52 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    14d8:	19 c0       	rjmp	.+50     	; 0x150c <__vector_125+0x136>
	}

	if (udd_is_suspend_event()) {
    14da:	80 91 cb 04 	lds	r24, 0x04CB
    14de:	86 ff       	sbrs	r24, 6
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <__vector_125+0x118>
		udd_ack_suspend_event();
    14e2:	80 e4       	ldi	r24, 0x40	; 64
    14e4:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	8a da       	rcall	.-2796   	; 0xa00 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <__vector_125+0x136>
	}

	if (udd_is_resume_event()) {
    14ee:	80 91 cb 04 	lds	r24, 0x04CB
    14f2:	85 ff       	sbrs	r24, 5
    14f4:	0b c0       	rjmp	.+22     	; 0x150c <__vector_125+0x136>
		udd_ack_resume_event();
    14f6:	80 e2       	ldi	r24, 0x20	; 32
    14f8:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	80 da       	rcall	.-2816   	; 0xa00 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1500:	05 c0       	rjmp	.+10     	; 0x150c <__vector_125+0x136>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1502:	80 91 cb 04 	lds	r24, 0x04CB
    1506:	84 ff       	sbrs	r24, 4
    1508:	e8 cf       	rjmp	.-48     	; 0x14da <__vector_125+0x104>
    150a:	d0 cf       	rjmp	.-96     	; 0x14ac <__vector_125+0xd6>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	0f 91       	pop	r16
    1526:	0f 90       	pop	r0
    1528:	0b be       	out	0x3b, r0	; 59
    152a:	0f 90       	pop	r0
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	0f 90       	pop	r0
    1530:	1f 90       	pop	r1
    1532:	18 95       	reti

00001534 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	0b b6       	in	r0, 0x3b	; 59
    1540:	0f 92       	push	r0
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	2f 93       	push	r18
    1548:	3f 93       	push	r19
    154a:	4f 93       	push	r20
    154c:	5f 93       	push	r21
    154e:	6f 93       	push	r22
    1550:	7f 93       	push	r23
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	af 93       	push	r26
    1558:	bf 93       	push	r27
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	ef 93       	push	r30
    1560:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1562:	80 91 cc 04 	lds	r24, 0x04CC
    1566:	81 fd       	sbrc	r24, 1
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    156a:	6d db       	rcall	.-2342   	; 0xc46 <udd_ctrl_interrupt_tc_setup>
    156c:	81 11       	cpse	r24, r1
    156e:	b9 c0       	rjmp	.+370    	; 0x16e2 <__vector_126+0x1ae>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1576:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    157a:	81 95       	neg	r24
    157c:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    157e:	e0 e0       	ldi	r30, 0x00	; 0
    1580:	f1 e2       	ldi	r31, 0x21	; 33
    1582:	e8 1b       	sub	r30, r24
    1584:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1586:	20 81       	ld	r18, Z
    1588:	31 81       	ldd	r19, Z+1	; 0x01
    158a:	20 50       	subi	r18, 0x00	; 0
    158c:	31 42       	sbci	r19, 0x21	; 33
    158e:	36 95       	lsr	r19
    1590:	27 95       	ror	r18
    1592:	36 95       	lsr	r19
    1594:	27 95       	ror	r18
    1596:	36 95       	lsr	r19
    1598:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    159a:	82 2f       	mov	r24, r18
    159c:	86 95       	lsr	r24
    159e:	20 fd       	sbrc	r18, 0
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <__vector_126+0x72>
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <__vector_126+0x74>
    15a6:	90 e8       	ldi	r25, 0x80	; 128
    15a8:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    15aa:	e8 2f       	mov	r30, r24
    15ac:	ef 70       	andi	r30, 0x0F	; 15
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    15b4:	28 2f       	mov	r18, r24
    15b6:	08 2e       	mov	r0, r24
    15b8:	00 0c       	add	r0, r0
    15ba:	33 0b       	sbc	r19, r19
    15bc:	22 27       	eor	r18, r18
    15be:	33 0f       	add	r19, r19
    15c0:	22 1f       	adc	r18, r18
    15c2:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    15c8:	df 01       	movw	r26, r30
    15ca:	aa 0f       	add	r26, r26
    15cc:	bb 1f       	adc	r27, r27
    15ce:	aa 0f       	add	r26, r26
    15d0:	bb 1f       	adc	r27, r27
    15d2:	aa 0f       	add	r26, r26
    15d4:	bb 1f       	adc	r27, r27
    15d6:	a0 50       	subi	r26, 0x00	; 0
    15d8:	bf 4d       	sbci	r27, 0xDF	; 223
    15da:	9c 91       	ld	r25, X
    15dc:	95 ff       	sbrs	r25, 5
    15de:	81 c0       	rjmp	.+258    	; 0x16e2 <__vector_126+0x1ae>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    15e0:	fd 01       	movw	r30, r26
    15e2:	00 e2       	ldi	r16, 0x20	; 32
    15e4:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    15e6:	81 11       	cpse	r24, r1
    15e8:	77 c0       	rjmp	.+238    	; 0x16d8 <__vector_126+0x1a4>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    15ea:	80 91 f7 20 	lds	r24, 0x20F7
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <__vector_126+0xc4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    15f2:	72 da       	rcall	.-2844   	; 0xad8 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    15f4:	2e da       	rcall	.-2980   	; 0xa52 <udd_ctrl_init>
    15f6:	75 c0       	rjmp	.+234    	; 0x16e2 <__vector_126+0x1ae>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    15f8:	00 91 02 21 	lds	r16, 0x2102
    15fc:	10 91 03 21 	lds	r17, 0x2103

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1600:	80 91 2f 21 	lds	r24, 0x212F
    1604:	90 91 30 21 	lds	r25, 0x2130
    1608:	c0 91 f3 20 	lds	r28, 0x20F3
    160c:	d0 91 f4 20 	lds	r29, 0x20F4
    1610:	9e 01       	movw	r18, r28
    1612:	20 0f       	add	r18, r16
    1614:	31 1f       	adc	r19, r17
    1616:	82 17       	cp	r24, r18
    1618:	93 07       	cpc	r25, r19
    161a:	18 f4       	brcc	.+6      	; 0x1622 <__vector_126+0xee>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    161c:	8c 01       	movw	r16, r24
    161e:	0c 1b       	sub	r16, r28
    1620:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1622:	80 91 2d 21 	lds	r24, 0x212D
    1626:	90 91 2e 21 	lds	r25, 0x212E
    162a:	a8 01       	movw	r20, r16
    162c:	6b ee       	ldi	r22, 0xEB	; 235
    162e:	70 e2       	ldi	r23, 0x20	; 32
    1630:	8c 0f       	add	r24, r28
    1632:	9d 1f       	adc	r25, r29
    1634:	f5 d1       	rcall	.+1002   	; 0x1a20 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1636:	c0 0f       	add	r28, r16
    1638:	d1 1f       	adc	r29, r17
    163a:	c0 93 f3 20 	sts	0x20F3, r28
    163e:	d0 93 f4 20 	sts	0x20F4, r29

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1642:	08 30       	cpi	r16, 0x08	; 8
    1644:	11 05       	cpc	r17, r1
    1646:	69 f4       	brne	.+26     	; 0x1662 <__vector_126+0x12e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1648:	80 91 f5 20 	lds	r24, 0x20F5
    164c:	90 91 f6 20 	lds	r25, 0x20F6
    1650:	8c 0f       	add	r24, r28
    1652:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1654:	20 91 2b 21 	lds	r18, 0x212B
    1658:	30 91 2c 21 	lds	r19, 0x212C
    165c:	82 17       	cp	r24, r18
    165e:	93 07       	cpc	r25, r19
    1660:	80 f0       	brcs	.+32     	; 0x1682 <__vector_126+0x14e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1662:	e5 e2       	ldi	r30, 0x25	; 37
    1664:	f1 e2       	ldi	r31, 0x21	; 33
    1666:	c2 87       	std	Z+10, r28	; 0x0a
    1668:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    166a:	06 84       	ldd	r0, Z+14	; 0x0e
    166c:	f7 85       	ldd	r31, Z+15	; 0x0f
    166e:	e0 2d       	mov	r30, r0
    1670:	30 97       	sbiw	r30, 0x00	; 0
    1672:	29 f0       	breq	.+10     	; 0x167e <__vector_126+0x14a>
			if (!udd_g_ctrlreq.over_under_run()) {
    1674:	19 95       	eicall
    1676:	81 11       	cpse	r24, r1
    1678:	02 c0       	rjmp	.+4      	; 0x167e <__vector_126+0x14a>
				// Stall ZLP
				udd_ctrl_stall_data();
    167a:	12 da       	rcall	.-3036   	; 0xaa0 <udd_ctrl_stall_data>
    167c:	32 c0       	rjmp	.+100    	; 0x16e2 <__vector_126+0x1ae>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    167e:	1e da       	rcall	.-3012   	; 0xabc <udd_ctrl_send_zlp_in>
    1680:	30 c0       	rjmp	.+96     	; 0x16e2 <__vector_126+0x1ae>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1682:	80 91 2f 21 	lds	r24, 0x212F
    1686:	90 91 30 21 	lds	r25, 0x2130
    168a:	c8 17       	cp	r28, r24
    168c:	d9 07       	cpc	r29, r25
    168e:	f9 f4       	brne	.+62     	; 0x16ce <__vector_126+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1690:	e0 91 33 21 	lds	r30, 0x2133
    1694:	f0 91 34 21 	lds	r31, 0x2134
    1698:	30 97       	sbiw	r30, 0x00	; 0
    169a:	11 f4       	brne	.+4      	; 0x16a0 <__vector_126+0x16c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    169c:	01 da       	rcall	.-3070   	; 0xaa0 <udd_ctrl_stall_data>
    169e:	21 c0       	rjmp	.+66     	; 0x16e2 <__vector_126+0x1ae>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    16a0:	19 95       	eicall
    16a2:	81 11       	cpse	r24, r1
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <__vector_126+0x176>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    16a6:	fc d9       	rcall	.-3080   	; 0xaa0 <udd_ctrl_stall_data>
    16a8:	1c c0       	rjmp	.+56     	; 0x16e2 <__vector_126+0x1ae>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    16aa:	20 91 f5 20 	lds	r18, 0x20F5
    16ae:	30 91 f6 20 	lds	r19, 0x20F6
    16b2:	80 91 f3 20 	lds	r24, 0x20F3
    16b6:	90 91 f4 20 	lds	r25, 0x20F4
    16ba:	82 0f       	add	r24, r18
    16bc:	93 1f       	adc	r25, r19
    16be:	80 93 f5 20 	sts	0x20F5, r24
    16c2:	90 93 f6 20 	sts	0x20F6, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    16c6:	10 92 f3 20 	sts	0x20F3, r1
    16ca:	10 92 f4 20 	sts	0x20F4, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    16ce:	e0 e0       	ldi	r30, 0x00	; 0
    16d0:	f1 e2       	ldi	r31, 0x21	; 33
    16d2:	02 e0       	ldi	r16, 0x02	; 2
    16d4:	06 93       	lac	Z, r16
    16d6:	05 c0       	rjmp	.+10     	; 0x16e2 <__vector_126+0x1ae>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    16d8:	80 38       	cpi	r24, 0x80	; 128
    16da:	11 f4       	brne	.+4      	; 0x16e0 <__vector_126+0x1ac>
		udd_ctrl_in_sent();
    16dc:	05 da       	rcall	.-3062   	; 0xae8 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <__vector_126+0x1ae>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    16e0:	21 db       	rcall	.-2494   	; 0xd24 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	0f 90       	pop	r0
    1704:	0b be       	out	0x3b, r0	; 59
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	dc 01       	movw	r26, r24
    1716:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    1718:	90 91 25 21 	lds	r25, 0x2125
    171c:	99 23       	and	r25, r25
    171e:	0c f0       	brlt	.+2      	; 0x1722 <udi_hid_setup+0x12>
    1720:	63 c0       	rjmp	.+198    	; 0x17e8 <udi_hid_setup+0xd8>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1722:	90 76       	andi	r25, 0x60	; 96
    1724:	09 f0       	breq	.+2      	; 0x1728 <udi_hid_setup+0x18>
    1726:	40 c0       	rjmp	.+128    	; 0x17a8 <udi_hid_setup+0x98>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1728:	80 91 26 21 	lds	r24, 0x2126
    172c:	86 30       	cpi	r24, 0x06	; 6
    172e:	e1 f5       	brne	.+120    	; 0x17a8 <udi_hid_setup+0x98>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1730:	0e 94 4c 02 	call	0x498	; 0x498 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1734:	dc 01       	movw	r26, r24
    1736:	1a 96       	adiw	r26, 0x0a	; 10
    1738:	2c 91       	ld	r18, X
    173a:	1a 97       	sbiw	r26, 0x0a	; 10
    173c:	21 32       	cpi	r18, 0x21	; 33
    173e:	09 f0       	breq	.+2      	; 0x1742 <udi_hid_setup+0x32>
    1740:	72 c0       	rjmp	.+228    	; 0x1826 <udi_hid_setup+0x116>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1742:	20 91 28 21 	lds	r18, 0x2128
    1746:	21 32       	cpi	r18, 0x21	; 33
    1748:	b1 f4       	brne	.+44     	; 0x1776 <udi_hid_setup+0x66>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    174a:	9c 01       	movw	r18, r24
    174c:	27 5f       	subi	r18, 0xF7	; 247
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1750:	20 93 2d 21 	sts	0x212D, r18
    1754:	30 93 2e 21 	sts	0x212E, r19
		udd_g_ctrlreq.payload_size =
    1758:	e5 e2       	ldi	r30, 0x25	; 37
    175a:	f1 e2       	ldi	r31, 0x21	; 33
				min(udd_g_ctrlreq.req.wLength,
    175c:	19 96       	adiw	r26, 0x09	; 9
    175e:	8c 91       	ld	r24, X
    1760:	26 81       	ldd	r18, Z+6	; 0x06
    1762:	37 81       	ldd	r19, Z+7	; 0x07
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	28 17       	cp	r18, r24
    1768:	39 07       	cpc	r19, r25
    176a:	08 f4       	brcc	.+2      	; 0x176e <udi_hid_setup+0x5e>
    176c:	c9 01       	movw	r24, r18
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    176e:	82 87       	std	Z+10, r24	; 0x0a
    1770:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	65 c0       	rjmp	.+202    	; 0x1840 <udi_hid_setup+0x130>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1776:	fc 01       	movw	r30, r24
    1778:	37 85       	ldd	r19, Z+15	; 0x0f
    177a:	23 13       	cpse	r18, r19
    177c:	56 c0       	rjmp	.+172    	; 0x182a <udi_hid_setup+0x11a>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    177e:	c0 93 2d 21 	sts	0x212D, r28
    1782:	d0 93 2e 21 	sts	0x212E, r29
		udd_g_ctrlreq.payload_size =
    1786:	e5 e2       	ldi	r30, 0x25	; 37
    1788:	f1 e2       	ldi	r31, 0x21	; 33
				min(udd_g_ctrlreq.req.wLength,
    178a:	dc 01       	movw	r26, r24
    178c:	50 96       	adiw	r26, 0x10	; 16
    178e:	2d 91       	ld	r18, X+
    1790:	3c 91       	ld	r19, X
    1792:	51 97       	sbiw	r26, 0x11	; 17
    1794:	86 81       	ldd	r24, Z+6	; 0x06
    1796:	97 81       	ldd	r25, Z+7	; 0x07
    1798:	28 17       	cp	r18, r24
    179a:	39 07       	cpc	r19, r25
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <udi_hid_setup+0x90>
    179e:	c9 01       	movw	r24, r18
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    17a0:	82 87       	std	Z+10, r24	; 0x0a
    17a2:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	4c c0       	rjmp	.+152    	; 0x1840 <udi_hid_setup+0x130>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17a8:	90 32       	cpi	r25, 0x20	; 32
    17aa:	09 f0       	breq	.+2      	; 0x17ae <udi_hid_setup+0x9e>
    17ac:	40 c0       	rjmp	.+128    	; 0x182e <udi_hid_setup+0x11e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    17ae:	80 91 26 21 	lds	r24, 0x2126
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	39 f0       	breq	.+14     	; 0x17c4 <udi_hid_setup+0xb4>
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	71 f0       	breq	.+28     	; 0x17d6 <udi_hid_setup+0xc6>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	d1 f5       	brne	.+116    	; 0x1832 <udi_hid_setup+0x122>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    17be:	f9 01       	movw	r30, r18
    17c0:	19 95       	eicall
    17c2:	3e c0       	rjmp	.+124    	; 0x1840 <udi_hid_setup+0x130>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    17c4:	e5 e2       	ldi	r30, 0x25	; 37
    17c6:	f1 e2       	ldi	r31, 0x21	; 33
    17c8:	a0 87       	std	Z+8, r26	; 0x08
    17ca:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	82 87       	std	Z+10, r24	; 0x0a
    17d2:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    17d4:	35 c0       	rjmp	.+106    	; 0x1840 <udi_hid_setup+0x130>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    17d6:	e5 e2       	ldi	r30, 0x25	; 37
    17d8:	f1 e2       	ldi	r31, 0x21	; 33
    17da:	60 87       	std	Z+8, r22	; 0x08
    17dc:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	82 87       	std	Z+10, r24	; 0x0a
    17e4:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    17e6:	2c c0       	rjmp	.+88     	; 0x1840 <udi_hid_setup+0x130>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17e8:	90 76       	andi	r25, 0x60	; 96
    17ea:	90 32       	cpi	r25, 0x20	; 32
    17ec:	21 f5       	brne	.+72     	; 0x1836 <udi_hid_setup+0x126>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    17ee:	80 91 26 21 	lds	r24, 0x2126
    17f2:	8a 30       	cpi	r24, 0x0A	; 10
    17f4:	39 f0       	breq	.+14     	; 0x1804 <udi_hid_setup+0xf4>
    17f6:	8b 30       	cpi	r24, 0x0B	; 11
    17f8:	51 f0       	breq	.+20     	; 0x180e <udi_hid_setup+0xfe>
    17fa:	89 30       	cpi	r24, 0x09	; 9
    17fc:	f1 f4       	brne	.+60     	; 0x183a <udi_hid_setup+0x12a>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    17fe:	f9 01       	movw	r30, r18
    1800:	19 95       	eicall
    1802:	1e c0       	rjmp	.+60     	; 0x1840 <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1804:	80 91 28 21 	lds	r24, 0x2128
    1808:	8c 93       	st	X, r24
				return true;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	19 c0       	rjmp	.+50     	; 0x1840 <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    180e:	80 91 2b 21 	lds	r24, 0x212B
    1812:	90 91 2c 21 	lds	r25, 0x212C
    1816:	89 2b       	or	r24, r25
    1818:	91 f4       	brne	.+36     	; 0x183e <udi_hid_setup+0x12e>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    181a:	80 91 27 21 	lds	r24, 0x2127
    181e:	db 01       	movw	r26, r22
    1820:	8c 93       	st	X, r24
				return true;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	0d c0       	rjmp	.+26     	; 0x1840 <udi_hid_setup+0x130>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	0b c0       	rjmp	.+22     	; 0x1840 <udi_hid_setup+0x130>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <udi_hid_setup+0x130>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <udi_hid_setup+0x130>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <udi_hid_setup+0x130>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <udi_hid_setup+0x130>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <udi_hid_setup+0x130>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    183e:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	80 93 70 00 	sts	0x0070, r24
    184c:	80 93 71 00 	sts	0x0071, r24
    1850:	80 93 72 00 	sts	0x0072, r24
    1854:	80 93 73 00 	sts	0x0073, r24
    1858:	80 93 74 00 	sts	0x0074, r24
    185c:	80 93 75 00 	sts	0x0075, r24
    1860:	80 93 76 00 	sts	0x0076, r24
    1864:	08 95       	ret

00001866 <sysclk_enable_module>:
    1866:	9f b7       	in	r25, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	e8 2f       	mov	r30, r24
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	e0 59       	subi	r30, 0x90	; 144
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 95       	com	r22
    1874:	80 81       	ld	r24, Z
    1876:	68 23       	and	r22, r24
    1878:	60 83       	st	Z, r22
    187a:	9f bf       	out	0x3f, r25	; 63
    187c:	08 95       	ret

0000187e <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    187e:	86 30       	cpi	r24, 0x06	; 6
    1880:	11 f0       	breq	.+4      	; 0x1886 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1886:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1888:	80 91 51 00 	lds	r24, 0x0051
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    188c:	81 fd       	sbrc	r24, 1
    188e:	0b c0       	rjmp	.+22     	; 0x18a6 <sysclk_enable_usb+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1890:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1892:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1894:	e0 e5       	ldi	r30, 0x50	; 80
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	82 60       	ori	r24, 0x02	; 2
    189c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    189e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    18a0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    18a2:	81 ff       	sbrs	r24, 1
    18a4:	fd cf       	rjmp	.-6      	; 0x18a0 <sysclk_enable_usb+0x22>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    18a6:	63 60       	ori	r22, 0x03	; 3
    18a8:	84 e4       	ldi	r24, 0x44	; 68
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e d0       	rcall	.+28     	; 0x18ca <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    18ae:	60 e4       	ldi	r22, 0x40	; 64
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	d9 cf       	rjmp	.-78     	; 0x1866 <sysclk_enable_module>
    18b4:	08 95       	ret

000018b6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    18b6:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    18ba:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    18bc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    18be:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    18c2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    18c4:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    18c8:	08 95       	ret

000018ca <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    18ca:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    18cc:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    18ce:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    18d0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    18d2:	60 83       	st	Z, r22
	ret                             // Return to caller
    18d4:	08 95       	ret

000018d6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	fc 01       	movw	r30, r24
    18dc:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    18e2:	c6 2f       	mov	r28, r22
    18e4:	d0 e0       	ldi	r29, 0x00	; 0
    18e6:	de 01       	movw	r26, r28
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <ioport_configure_port_pin+0x1a>
    18ec:	b5 95       	asr	r27
    18ee:	a7 95       	ror	r26
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <ioport_configure_port_pin+0x16>
    18f4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    18f6:	50 83       	st	Z, r21
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    18fe:	28 30       	cpi	r18, 0x08	; 8
    1900:	31 05       	cpc	r19, r1
    1902:	89 f7       	brne	.-30     	; 0x18e6 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1904:	40 ff       	sbrs	r20, 0
    1906:	0a c0       	rjmp	.+20     	; 0x191c <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1908:	41 ff       	sbrs	r20, 1
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    190c:	fc 01       	movw	r30, r24
    190e:	65 83       	std	Z+5, r22	; 0x05
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1912:	fc 01       	movw	r30, r24
    1914:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1916:	fc 01       	movw	r30, r24
    1918:	61 83       	std	Z+1, r22	; 0x01
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    191c:	fc 01       	movw	r30, r24
    191e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	08 95       	ret

00001926 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1926:	43 e0       	ldi	r20, 0x03	; 3
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	80 e8       	ldi	r24, 0x80	; 128
    192e:	96 e0       	ldi	r25, 0x06	; 6
    1930:	d2 df       	rcall	.-92     	; 0x18d6 <ioport_configure_port_pin>
    1932:	43 e0       	ldi	r20, 0x03	; 3
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	62 e0       	ldi	r22, 0x02	; 2
    1938:	80 e8       	ldi	r24, 0x80	; 128
    193a:	96 e0       	ldi	r25, 0x06	; 6
    193c:	cc df       	rcall	.-104    	; 0x18d6 <ioport_configure_port_pin>
    193e:	43 e0       	ldi	r20, 0x03	; 3
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	64 e0       	ldi	r22, 0x04	; 4
    1944:	80 e8       	ldi	r24, 0x80	; 128
    1946:	96 e0       	ldi	r25, 0x06	; 6
    1948:	c6 df       	rcall	.-116    	; 0x18d6 <ioport_configure_port_pin>
    194a:	43 e0       	ldi	r20, 0x03	; 3
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	68 e0       	ldi	r22, 0x08	; 8
    1950:	80 e8       	ldi	r24, 0x80	; 128
    1952:	96 e0       	ldi	r25, 0x06	; 6
    1954:	c0 df       	rcall	.-128    	; 0x18d6 <ioport_configure_port_pin>
    1956:	43 e0       	ldi	r20, 0x03	; 3
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	60 e1       	ldi	r22, 0x10	; 16
    195c:	80 e8       	ldi	r24, 0x80	; 128
    195e:	96 e0       	ldi	r25, 0x06	; 6
    1960:	ba df       	rcall	.-140    	; 0x18d6 <ioport_configure_port_pin>
    1962:	43 e0       	ldi	r20, 0x03	; 3
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	60 e2       	ldi	r22, 0x20	; 32
    1968:	80 e8       	ldi	r24, 0x80	; 128
    196a:	96 e0       	ldi	r25, 0x06	; 6
    196c:	b4 df       	rcall	.-152    	; 0x18d6 <ioport_configure_port_pin>
    196e:	43 e0       	ldi	r20, 0x03	; 3
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	60 e4       	ldi	r22, 0x40	; 64
    1974:	80 e8       	ldi	r24, 0x80	; 128
    1976:	96 e0       	ldi	r25, 0x06	; 6
    1978:	ae df       	rcall	.-164    	; 0x18d6 <ioport_configure_port_pin>
    197a:	43 e0       	ldi	r20, 0x03	; 3
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	60 e8       	ldi	r22, 0x80	; 128
    1980:	80 e8       	ldi	r24, 0x80	; 128
    1982:	96 e0       	ldi	r25, 0x06	; 6
    1984:	a8 df       	rcall	.-176    	; 0x18d6 <ioport_configure_port_pin>
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	58 e1       	ldi	r21, 0x18	; 24
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	80 ea       	ldi	r24, 0xA0	; 160
    198e:	96 e0       	ldi	r25, 0x06	; 6
    1990:	a2 df       	rcall	.-188    	; 0x18d6 <ioport_configure_port_pin>
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	58 e1       	ldi	r21, 0x18	; 24
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	80 ea       	ldi	r24, 0xA0	; 160
    199a:	96 e0       	ldi	r25, 0x06	; 6
    199c:	9c df       	rcall	.-200    	; 0x18d6 <ioport_configure_port_pin>
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	58 e1       	ldi	r21, 0x18	; 24
    19a2:	64 e0       	ldi	r22, 0x04	; 4
    19a4:	80 ea       	ldi	r24, 0xA0	; 160
    19a6:	96 e0       	ldi	r25, 0x06	; 6
    19a8:	96 df       	rcall	.-212    	; 0x18d6 <ioport_configure_port_pin>
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	58 e1       	ldi	r21, 0x18	; 24
    19ae:	68 e0       	ldi	r22, 0x08	; 8
    19b0:	80 ea       	ldi	r24, 0xA0	; 160
    19b2:	96 e0       	ldi	r25, 0x06	; 6
    19b4:	90 df       	rcall	.-224    	; 0x18d6 <ioport_configure_port_pin>
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	58 e1       	ldi	r21, 0x18	; 24
    19ba:	60 e1       	ldi	r22, 0x10	; 16
    19bc:	80 ea       	ldi	r24, 0xA0	; 160
    19be:	96 e0       	ldi	r25, 0x06	; 6
    19c0:	8a df       	rcall	.-236    	; 0x18d6 <ioport_configure_port_pin>
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	58 e1       	ldi	r21, 0x18	; 24
    19c6:	60 e2       	ldi	r22, 0x20	; 32
    19c8:	80 ea       	ldi	r24, 0xA0	; 160
    19ca:	96 e0       	ldi	r25, 0x06	; 6
    19cc:	84 df       	rcall	.-248    	; 0x18d6 <ioport_configure_port_pin>
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	58 e1       	ldi	r21, 0x18	; 24
    19d2:	60 e4       	ldi	r22, 0x40	; 64
    19d4:	80 ea       	ldi	r24, 0xA0	; 160
    19d6:	96 e0       	ldi	r25, 0x06	; 6
    19d8:	7e df       	rcall	.-260    	; 0x18d6 <ioport_configure_port_pin>
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	58 e1       	ldi	r21, 0x18	; 24
    19de:	60 e8       	ldi	r22, 0x80	; 128
    19e0:	80 ea       	ldi	r24, 0xA0	; 160
    19e2:	96 e0       	ldi	r25, 0x06	; 6
    19e4:	78 cf       	rjmp	.-272    	; 0x18d6 <ioport_configure_port_pin>
    19e6:	08 95       	ret

000019e8 <__udivmodhi4>:
    19e8:	aa 1b       	sub	r26, r26
    19ea:	bb 1b       	sub	r27, r27
    19ec:	51 e1       	ldi	r21, 0x11	; 17
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <__udivmodhi4_ep>

000019f0 <__udivmodhi4_loop>:
    19f0:	aa 1f       	adc	r26, r26
    19f2:	bb 1f       	adc	r27, r27
    19f4:	a6 17       	cp	r26, r22
    19f6:	b7 07       	cpc	r27, r23
    19f8:	10 f0       	brcs	.+4      	; 0x19fe <__udivmodhi4_ep>
    19fa:	a6 1b       	sub	r26, r22
    19fc:	b7 0b       	sbc	r27, r23

000019fe <__udivmodhi4_ep>:
    19fe:	88 1f       	adc	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	5a 95       	dec	r21
    1a04:	a9 f7       	brne	.-22     	; 0x19f0 <__udivmodhi4_loop>
    1a06:	80 95       	com	r24
    1a08:	90 95       	com	r25
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	08 95       	ret

00001a10 <__tablejump2__>:
    1a10:	ee 0f       	add	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	88 1f       	adc	r24, r24
    1a16:	8b bf       	out	0x3b, r24	; 59
    1a18:	07 90       	elpm	r0, Z+
    1a1a:	f6 91       	elpm	r31, Z
    1a1c:	e0 2d       	mov	r30, r0
    1a1e:	19 94       	eijmp

00001a20 <memcpy>:
    1a20:	fb 01       	movw	r30, r22
    1a22:	dc 01       	movw	r26, r24
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <memcpy+0xa>
    1a26:	01 90       	ld	r0, Z+
    1a28:	0d 92       	st	X+, r0
    1a2a:	41 50       	subi	r20, 0x01	; 1
    1a2c:	50 40       	sbci	r21, 0x00	; 0
    1a2e:	d8 f7       	brcc	.-10     	; 0x1a26 <memcpy+0x6>
    1a30:	08 95       	ret

00001a32 <_exit>:
    1a32:	f8 94       	cli

00001a34 <__stop_program>:
    1a34:	ff cf       	rjmp	.-2      	; 0x1a34 <__stop_program>
